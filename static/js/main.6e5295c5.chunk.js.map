{"version":3,"sources":["../node_modules/peerjs/dist sync","actions/ready.js","actions/repeat.js","actions/setMove.js","actions/selectType.js","actions/changeStatus.js","actions/receiveReady.js","actions/receiveRepeat.js","reducers/game.js","functions/getCoordinates.js","actions/send.js","actions/receive.js","actions/setId.js","actions/setIsClient.js","actions/setInterface.js","actions/clearMessage.js","actions/setIsConnected.js","actions/setIsInitialised.js","functions/makeSea.js","functions/getShip.js","functions/countShips.js","functions/makeDeck.js","functions/isThereShip.js","actions/placeShip.js","functions/removeDeck.js","functions/isThereShipDiagonally.js","functions/isThereShipInCross.js","functions/shootAroundSankShip.js","actions/receiveFire.js","functions/itSank.js","actions/sendVictory.js","functions/makeSquadron.js","actions/clearFeedback.js","actions/randomPlacing.js","actions/receiveVictory.js","actions/receiveFeedback.js","reducers/sea.js","reducers/index.js","reducers/peer.js","store.js","classes/Machine.js","components/Sea.js","components/Cell.js","functions/isShipPlaced.js","components/Ally.js","components/Enemy.js","components/Ocean.js","classes/Person.js","components/Input.js","components/Button.js","components/Select.js","components/Placing.js","components/Modal.js","components/Game.js","components/App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","state","isAllyReady","isAllyWantRepeat","move","action","status","payload","type","isEnemyReady","isEnemyWantRepeat","initialState","match","map","item","parseInt","message","data","getCoordinates","console","log","JSON","parse","stringify","waitingForFeedback","lastSent","lastReceived","isClient","interface","isConnected","isInitialised","ten","Array","y","x","hit","miss","ship","sank","string","split","shipsToPlace","squadron","reduce","sum","length","a","b","count","deckToPlace","findNext","deck","coordinates","toStart","newState","pop","unshift","forEach","index","ally","countShips","sea","thereIsShip","isThereShip","getShip","splice","push","removeDeck","isThereShipDiagonally","thereIsShipInCross","filter","i","isThereShipInCross","newDeck","makeDeck","newSea","newShip","xsLength","ysLength","condition","head","shoot","feedback","itSank","allyShipsLeft","shootAroundSankShip","row","cell","h","_","shifts","getRandomCoordinates","direction","Math","floor","random","error","enemy","enemyShipsLeft","makeSea","makeSquadron","reducers","combineReducers","game","selectType","changeStatus","ready","repeat","setMove","receiveReady","receiveRepeat","peer","setInterface","send","clearMessage","receive","setId","setIsClient","setIsConnected","setIsInitialised","clearFeedback","placeShip","randomPlacing","receiveFire","receiveFeedback","receiveVictory","sendVictory","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Machine","props","init","newGame","shootLog","lastShoot","directions","directionsStack","fireDelay","connect","changeState","findLogIndex","findIndex","toString","anotherDirection","newDirection","indexOf","randomDirectionsStack","reverseDirection","findHitIndex","reduceRight","position","cannotShoot","addShift","shift","randomStock","hasCoordinates","array","nextDirection","setTimeout","post","logIndex","this","Wrapper","styled","div","css","Content","children","Cell","last","isCompleted","completed","dispatch","place","Sea","key","isShipPlaced","onClick","fire","Person","close","connection","disconnect","Peer","lastPeerID","initialised","on","c","_lastServerID","reconnect","join","options","client","open","reliable","serialization","blink","keyframes","Input","input","attrs","size","maxLength","Caret","caret","Placeholder","Background","onInput","readonly","submit","symbols","value","useRef","useState","setCaret","moveCaret","event","target","selectionEnd","useEffect","current","focus","inputProps","onChange","preventDefault","onKeyUp","onPaste","onKeyDown","ref","Button","button","autoFocus","className","text","undefined","substring","title_","Buttons","network","peerId","setPeerId","handleDisconnect","ShipsLeft","StyledDeck","isPlaced","isNext","Space","Deck","heap","Window","Text","reset","resultText","victory","defeat","Ocean","newRound","handleKeyPress","toLowerCase","document","removeEventListener","addEventListener","ReactDOM","render","path","component","App","getElementById"],"mappings":"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","file":"static/js/main.6e5295c5.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 49;","export default (state) => ({\n  ...state,\n  isAllyReady: true,\n});\n","export default (state) => ({\n  ...state,\n  isAllyWantRepeat: true,\n});\n","export default (state) => ({\n  ...state,\n  move: !state.move,\n});\n","export default (state, action) => ({\n  ...state,\n  status: action.payload ? `connect` : `place`,\n  type: action.payload ? `pvp` : `comp`,\n  move: action.payload ? state.move : true,\n});\n","export default (state, action) => ({\n  ...state,\n  status: action.payload,\n});\n","export default (state) => ({\n  ...state,\n  isEnemyReady: true,\n});\n","export default (state) => ({\n  ...state,\n  isEnemyWantRepeat: true,\n});\n","import ready from '../actions/ready';\nimport repeat from '../actions/repeat';\nimport setMove from '../actions/setMove';\nimport selectType from '../actions/selectType';\nimport changeStatus from '../actions/changeStatus';\nimport receiveReady from '../actions/receiveReady';\nimport receiveRepeat from '../actions/receiveRepeat';\n\n/**\n * status:\n *   choose           -- waiting for game type to be chosen\n *   connect          -- waiting for opponent to connect\n *   place            -- waiting for all ships to be placed (switched automatically)\n *   confirm          -- waiting for confirm of ship placement\n *   wait             -- waiting for opponent to confirm ship placement\n *   play             -- waiting till all ship sank in any of seas\n *   victory, defeat  -- waiting for confirmation of new round\n *\n * type:\n *   pvp  -- you versus someone on network\n *   comp -- you versus computer\n *\n * isAllyReady  -- flag shows that you confirmed ship placement\n * isEnemyReady -- flag shows that your opponent confirmed ship placement\n *\n * isAllyWantRepeat  -- flag shows that you agreed on another round\n * isEnemyWantRepeat -- flag shows that your opponent agreed on another round\n *\n * move -- flag shows if it's your turn to fire\n * in comp mode your it's turn at every round start\n * in pvp mode it's changing alternately with every new round\n * and in first round client peer fires first\n */\n\nconst initialState = (status = `choose`, move = false) => ({\n  type: null,\n  isAllyReady: false,\n  isEnemyReady: false,\n  isAllyWantRepeat: false,\n  isEnemyWantRepeat: false,\n  status,\n  move,\n});\n\nexport default (state = initialState(), action) => {\n  switch (action.type) {\n    case `SELECT_TYPE`:\n      return selectType(state, action);\n\n    case `CHANGE_STATUS`:\n      return changeStatus(state, action);\n\n    case `READY`:\n      return ready(state);\n\n    case `REPEAT`:\n      return repeat(state);\n\n    case `SEND`: {\n      switch (action.payload.type) {\n        case `feedback`:\n          return action.payload.feedback === `miss`\n            ? setMove(state)\n            : state;\n\n        case `victory`:\n          return changeStatus(state, { payload: `victory` });\n\n        default:\n          return state;\n      }\n    }\n\n    case `RECEIVE`: {\n      switch (action.payload.type) {\n        case `ready`:\n          return receiveReady(state);\n\n        case `repeat`:\n          return receiveRepeat(state);\n\n        case `feedback`:\n          return action.payload.feedback === `miss`\n            ? setMove(state)\n            : state;\n\n        case `victory`:\n          return changeStatus(state, { payload: `defeat` });\n\n        default:\n          return state;\n      }\n    }\n\n    case `SET_MOVE`:\n      return action.payload\n        ? setMove(state)\n        : state;\n\n    case `RESET`:\n      return initialState();\n\n    case `NEW_ROUND`:\n      return initialState(`place`, state.type === 'pvp' ? !state.move : true);\n\n    default:\n      return state;\n  }\n}\n","/**\n * input: `cell-3-4-ally`\n * output: [3, 4]\n */\n\n/**\n * choose less fucked up version:\n  */\n// export default (id) => id.split('-').reduce((a, i) => +i ? [ ...a, +i] : a, []);\nexport default (id) => id.match(/\\d+-/g).map(item => parseInt(item));\n","import getCoordinates from '../functions/getCoordinates';\n\nexport default (state, action) => {\n  const message = action.payload.type === `fire`\n    ? { type: `fire`, data: getCoordinates(action.payload.data) }\n    : { ...action.payload };\n\n  console.log(`sent:     `, JSON.parse(JSON.stringify(message)));\n\n  return {\n    ...state,\n    message,\n    waitingForFeedback: action.payload.type === `fire`,\n    lastSent: action.payload.type === `fire` ? action.payload.data : state.lastSent,\n  };\n}\n","export default (state, action) => {\n  console.log(`received: `, JSON.parse(JSON.stringify(action.payload)));\n\n  return {\n    ...state,\n    waitingForFeedback: false,\n    lastReceived: action.payload.type === `fire` ? `cell-${ action.payload.data[0] }-${ action.payload.data[1] }-ally` : state.lastReceived,\n  };\n}\n","export default (state, action) => ({\n  ...state,\n  id: action.payload,\n});\n","export default (state) => ({\n  ...state,\n  isClient: true,\n});\n","export default (state, action) => ({\n  ...state,\n  interface: action.payload,\n});\n","export default (state) => ({ ...state, message: null });\n","export default (state) => ({\n  ...state,\n  isConnected: true,\n});\n","export default (state) => ({\n  ...state,\n  isInitialised: true,\n});\n","export default (type) => {\n  const ten = [...Array(10).keys()];\n\n  return ten.map(y =>\n    ten.map(x =>\n      ({\n        id: `cell-${ x }-${ y }-${ type }`,\n        hit: false,\n        miss: false,\n        ship: false,\n        sank: false,\n      })\n    )\n  );\n};\n","/**\n * input: `1-2-3`\n * output: [1, 2, 3]\n */\n\nexport default (string) => string.split(`-`).map(item => parseInt(item));\n","/**\n * counting ships to be placed\n * takes every ship in array 'type',\n * if ship has null as element - returns 1 (as one that need placement),\n * if not -- 0 (as placed).\n * then returns number of ships that not placed\n */\n\nconst count = (type) => type\n  .map(item =>                  // let's take a ship\n    item[0] === null            // i'ts first deck empty?\n      ? 1                       // it should be placed\n      : item.length === 1       // it's single decker?\n      ? 0                       // nothing to do here\n      : item.reduce((a, b) =>   // let's look at all it's decks\n        a === 1                 // was there empty deck earlier?\n          ? 1                   // there was, keep it to the end\n          : b === null          // is this deck empty?\n            ? 1                 // it should be placed\n            : 0                 // nothing to do here\n      )\n  )\n  .reduce((a, b) => a + b);     // sum of all ships that need to be placed\n\nexport default (state) => {\n  const shipsToPlace = state.squadron.reduce((sum, type) => sum + count(type), 0);\n  let deckToPlace = { ...state.deckToPlace };\n\n  findNext:\n    for (let type = 0; type < state.squadron.length; type++) {\n      for (let ship = 0; ship < state.squadron[type].length; ship++) {\n        for (let deck = 0; deck < state.squadron[type][ship].length; deck++) {\n          if (state.squadron[type][ship][deck] === null) {\n            deckToPlace = { type, ship, deck };\n            break findNext;\n          }\n        }\n      }\n    }\n\n  return {\n    ...state,\n    shipsToPlace,\n    deckToPlace,\n  };\n}\n","import countShips from './countShips';\n\n/**\n * adding new deck to the ship;\n * renewing 'ship' parameter of all cells of that ship\n */\n\nexport default (type, ship, deck, coordinates, state, toStart) => {\n  const newState = { ...state };\n\n  if (toStart) {\n    newState.squadron[type][ship].pop();\n    newState.squadron[type][ship].unshift(coordinates);\n  } else {\n    newState.squadron[type][ship][deck] = coordinates;\n  }\n\n  newState.squadron[type][ship].forEach((item, index) => {\n    item && (newState.ally[item[1]][item[0]].ship = `${ type }-${ ship }-${ index }`);\n  });\n\n  return countShips(newState);\n}\n","/**\n * returns ship parameter of cell with current coordinates\n */\n\nexport default (sea, coordinates) => sea[coordinates[1]][coordinates[0]].ship;\n","import getShip from '../functions/getShip';\nimport makeDeck from '../functions/makeDeck';\nimport removeDeck from '../functions/removeDeck';\nimport isThereShip from '../functions/isThereShip';\nimport getCoordinates from '../functions/getCoordinates';\nimport isThereShipInCross from '../functions/isThereShipInCross';\nimport isThereShipDiagonally from '../functions/isThereShipDiagonally';\n\nexport default (state, action) => {\n  const newState = { ...state };\n  const coordinates = getCoordinates(action.payload);\n\n  /**\n   * removing decks from ship\n   */\n  const thereIsShip = isThereShip(newState.ally, coordinates);\n  if (thereIsShip) {\n    /**\n     * removing possible only with ends of ships,\n     * decks in the middle could not be deleted\n     */\n    const [type, ship, deck] = getShip(thereIsShip);\n    return (deck === 0 || !newState.squadron[type][ship][deck + 1])\n      ? removeDeck(type, ship, deck, coordinates, newState)\n      : newState;\n  }\n\n  /**\n   * doing nothing if there are ships diagonally\n   */\n  const thereIsShipDiagonally = isThereShipDiagonally(newState.ally, coordinates);\n  if (thereIsShipDiagonally) return newState;\n\n  /**\n   * adding deck to the ship\n   */\n  const thereIsShipInCross = isThereShipInCross(newState.ally, coordinates);\n  if (thereIsShipInCross.length === 1) {\n    /**\n     * if clicked at the cell next to only one ship\n     * horizontally or vertically,\n     * see if we can add deck with this cell coordinates\n     * to this ship\n     */\n    const [type, ship] = thereIsShipInCross[0].split(`-`).map(item => parseInt(item));\n    for (let newDeck = 1; newDeck < newState.squadron[type][ship].length; newDeck++) {\n      if (newState.squadron[type][ship][newDeck] === null) {\n        const toStart = (\n          coordinates[0] < newState.squadron[type][ship][0][0] ||\n          coordinates[1] < newState.squadron[type][ship][0][1]\n        );\n        return makeDeck(type, ship, newDeck, coordinates, newState, toStart);\n      }\n    }\n\n    return newState;\n  }\n\n  /**\n   * placing new ship\n   */\n  for (let i = 0; i < newState.squadron[newState.deckToPlace.type].length; i++) {\n    const ship = newState.squadron[newState.deckToPlace.type][i];\n    const shipIsFull = ship.filter(i => i).length === ship.length;\n    if (shipIsFull) continue;\n      /**\n       * new deck must be first deck of ship,\n       * adding decks handled previously with `thereIsShipInCross`.\n       * it`s made to prevent breaking order of ship placement\n       * (four decker -> three decker -> two decker -> single decker)\n       */\n    return ship[0] === null\n      ? makeDeck(newState.deckToPlace.type, i, 0, coordinates, newState, false)\n      : newState;\n  }\n\n  return newState;\n}\n","import countShips from './countShips';\n\n/**\n * removing deck from the ship;\n * removing 'ship' parameter of cell of removed deck\n * and renewing it for the rest cells of that ship\n */\n\nexport default (type, ship, deck, coordinates, state) => {\n  const newState = { ...state };\n\n  newState.squadron[type][ship].splice(deck, 1);\n  newState.squadron[type][ship].push(null);\n\n  newState.ally[coordinates[1]][coordinates[0]].ship = false;\n  newState.squadron[type][ship].forEach((item, index) => {\n    item && (newState.ally[item[1]][item[0]].ship = `${ type }-${ ship }-${ index }`);\n  });\n\n  return countShips(newState);\n}\n","/**\n * input: coordinates of `a` cell\n * return: first not-false ship parameter of any `b` cell\n * (going clockwise, starting with left-top)\n *\n * ____________\n * |_b_|___|_b_|\n * |___|_a_|___|\n * |_b_|___|_b_|\n *\n */\n\nexport default (sea, coordinates) => (\n  (\n    sea[coordinates[1] - 1] && (\n      (\n        sea[coordinates[1] - 1][coordinates[0] - 1] &&\n        sea[coordinates[1] - 1][coordinates[0] - 1].ship\n      )\n      ||\n      (\n        sea[coordinates[1] - 1][coordinates[0] + 1] &&\n        sea[coordinates[1] - 1][coordinates[0] + 1].ship\n      )\n    )\n  ) || (\n    sea[coordinates[1] + 1] && (\n      (\n        sea[coordinates[1] + 1][coordinates[0] - 1] &&\n        sea[coordinates[1] + 1][coordinates[0] - 1].ship\n      )\n      ||\n      (\n        sea[coordinates[1] + 1][coordinates[0] + 1] &&\n        sea[coordinates[1] + 1][coordinates[0] + 1].ship\n      )\n    )\n  )\n);\n","/**\n * input: coordinates of `a` cell\n * return: array of not-false ship parameters of all `b` cells\n * (going clockwise, starting with top)\n *\n * ____________\n * |___|_b_|___|\n * |_b_|_a_|_b_|\n * |___|_b_|___|\n *\n */\n\nexport default (sea, coordinates) => [\n  (\n    sea[coordinates[1] - 1] &&\n    sea[coordinates[1] - 1][coordinates[0]] &&\n    sea[coordinates[1] - 1][coordinates[0]].ship\n  ),\n  (\n    sea[coordinates[1] + 1] &&\n    sea[coordinates[1] + 1][coordinates[0]] &&\n    sea[coordinates[1] + 1][coordinates[0]].ship\n  ),\n  (\n    sea[coordinates[1]][coordinates[0] - 1] &&\n    sea[coordinates[1]][coordinates[0] - 1].ship\n  ),\n  (\n    sea[coordinates[1]][coordinates[0] + 1] &&\n    sea[coordinates[1]][coordinates[0] + 1].ship\n  ),\n].filter(i => i);\n","/**\n * input: ship array\n * return: sea with all cells around ship setting miss parameter\n */\n\nexport default (sea, ship) => {\n  const newSea = [...sea];\n  const newShip = [...ship];\n\n  const [xsLength, ysLength] = newShip.length === 1        // lengths of arrays of cells around ship\n    ? [3, 3]                                              // for single decker (1x1) it's 3x3\n    : newShip[1][1] - newShip[0][1] === 0\n      ? [newShip.length + 2, 3]                           // ship length + 2 cells around\n      : [3, newShip.length + 2];\n\n  const condition = (x, y) =>                             // returns false if ship has cell with x and y coordinates\n    newShip.length === 1\n      ? !(x === 1 && y === 1)\n      : newShip[1][1] - newShip[0][1] === 0\n        ? !(x > 0 && x < newShip.length + 1 && y === 1)\n        : !(y > 0 && y < newShip.length + 1 && x === 1);\n\n  const shoot = (x, y) => {\n    const head = newShip[0];                               // first deck of ship (leftmost or topmost)\n    if (\n      newSea[y - 1 + head[1]] &&                           // -1 because 0 would hit ship cell, and we need cell before\n      newSea[y - 1 + head[1]][x - 1 + head[0]]\n    ) {\n      newSea[y - 1 + head[1]][x - 1 + head[0]].miss = true;\n    }\n  };\n\n  [...Array(ysLength).keys()].forEach(y => {\n    [...Array(xsLength).keys()].forEach(x => {\n      condition(x, y) && shoot(x, y);\n    });\n  });\n\n  return newSea;\n}\n","import itSank from '../functions/itSank';\nimport getShip from '../functions/getShip';\nimport isThereShip from '../functions/isThereShip';\nimport shootAroundSankShip from '../functions/shootAroundSankShip';\n\nexport default (state, action) => {\n  let feedback;\n  const data = [];\n  const newState = { ...state };\n  const coordinates = [...action.payload.data];\n  const thereIsShip = isThereShip(newState.ally, coordinates);\n\n  if (thereIsShip) {\n    newState.ally[coordinates[1]][coordinates[0]].hit = true;\n    const [type, ship] = getShip(thereIsShip);\n    if (itSank(type, ship, newState)) {\n      newState.allyShipsLeft -= 1;\n      if (newState.allyShipsLeft === 0) {\n        newState.feedback = { type: `defeat` };\n        return newState;\n      }\n\n      newState.squadron[type][ship].forEach(item => {\n        newState.ally[item[1]][item[0]].sank = true;\n        data.push(item);\n      });\n\n      newState.ally = shootAroundSankShip(newState.ally, data);\n      feedback = `sank`;\n    } else {\n      feedback = `hit`;\n    }\n  } else {\n    feedback = `miss`;\n    newState.ally[coordinates[1]][coordinates[0]].miss = true;\n  }\n\n  data.length === 0 && data.push(coordinates);\n  newState.feedback = { type: `feedback`, data, feedback };\n  return newState;\n}\n","export default (type, ship, state) => {\n  const areAllDecksHitted = (a, i) => state.ally[i[1]][i[0]].hit && a;\n  return state.squadron[type][ship].reduce(areAllDecksHitted, true);\n}\n","/**\n * 0 == empty\n * 1 == miss\n * 2 == sank\n * 3 == hit\n * 4 == ship\n */\n\nexport default (state) => ({\n  ...state,\n  feedback: {\n    type: `victory`,\n    data: [\n      ...state.ally.map(row =>\n        row.map(cell =>\n          cell.miss\n            ? 1\n            : cell.sank\n              ? 2\n              : cell.hit\n                ? 3\n                : cell.ship\n                  ? 4\n                  : 0\n        )\n      )\n    ],\n  },\n});\n","/**\n * there are four ship types:\n * 4-deck (1pc)\n * 3-deck (2pc)\n * 2-deck (3pc)\n * 1-deck (4pc)\n *\n * output is array of all ships\n * each ship is array of decks\n * each deck is array of coordinates -- [x, y]\n * by default deck is null\n */\n\nexport default () =>\n  [...Array(4).keys()].map(h =>\n    [...Array(h + 1)].map(_ =>\n      [...Array(4 - h)].map(_ =>\n        null\n      )\n    )\n  );\n","export default (state) => ({ ...state, feedback: null });\n","import countShips from '../functions/countShips';\n\nconst shifts = [ // constraints of coordinates of first deck for all ship types\n  [\n    [-3, 0],\n    [0, -3],\n  ],\n  [\n    [-2, 0],\n    [0, -2],\n  ],\n  [\n    [-1, 0],\n    [0, -1],\n  ],\n  [\n    [0, 0],\n    [0, 0],\n  ],\n];\n\nconst getRandomCoordinates = (state, type) => {\n  const newState = { ...state };\n  /**\n   * create random coordinates in constrained range;\n   * check if there is ships diagonally or in cross\n   * to first deck with this coordinates and all other decks;\n   * if there is -- create new coordinates recursively.\n   * first deck of ship is leftmost or topmost\n   * for horizontal or vertical direction respectively\n   *\n   * output is coordinates of first deck and placing direction of other decks\n   */\n  const direction = Math.floor(Math.random() + .5); // 0 == horizontal, 1 == vertical\n  const coordinates = [\n    Math.floor(Math.random() * (10 + shifts[type][direction][0])),\n    Math.floor(Math.random() * (10 + shifts[type][direction][1])),\n  ];\n\n  try {\n    for (let i = -1; i <= newState.squadron[type][0].length + 1; i++) {\n      if (\n        (\n          direction === 1 &&\n          newState.ally[coordinates[1] + i] && (\n            (\n              newState.ally[coordinates[1] + i][coordinates[0] - 1] &&\n              newState.ally[coordinates[1] + i][coordinates[0] - 1].ship\n            ) || (\n              newState.ally[coordinates[1] + i][coordinates[0]] &&\n              newState.ally[coordinates[1] + i][coordinates[0]].ship\n            ) || (\n              newState.ally[coordinates[1] + i][coordinates[0] + 1] &&\n              newState.ally[coordinates[1] + i][coordinates[0] + 1].ship\n            )\n          )\n        ) || (\n          direction === 0 && (\n            (\n              newState.ally[coordinates[1] - 1] &&\n              newState.ally[coordinates[1] - 1][coordinates[0] + i] &&\n              newState.ally[coordinates[1] - 1][coordinates[0] + i].ship\n            ) || (\n              newState.ally[coordinates[1]][coordinates[0] + i] &&\n              newState.ally[coordinates[1]][coordinates[0] + i].ship\n            ) || (\n              newState.ally[coordinates[1] + 1] &&\n              newState.ally[coordinates[1] + 1][coordinates[0] + i] &&\n              newState.ally[coordinates[1] + 1][coordinates[0] + i].ship\n            )\n          )\n        )\n      ) {\n        return getRandomCoordinates(newState, type);\n      }\n    }\n  } catch ({ message }) {\n    console.error(message);\n    return {};\n  }\n\n  return { coordinates, direction };\n};\n\nexport default (state) => {\n  const newState = { ...state };\n\n  try {\n      newState.squadron.forEach((_, type) => {\n        newState.squadron[type].forEach((_, ship) => {\n          const { coordinates, direction } = getRandomCoordinates(newState, type);\n          if (!coordinates) throw new Error(`Browser too weak for such recursion 😔`);\n\n          newState.squadron[type][ship] = newState.squadron[type][ship].map((_, index) =>\n            direction === 0\n              ? [coordinates[0] + index, coordinates[1]]\n              : [coordinates[0], coordinates[1] + index]\n          );\n\n          newState.squadron[type][ship].forEach((item, deck) => {\n            newState.ally[item[1]][item[0]].ship = `${ type }-${ ship }-${ deck }`;\n          });\n        })\n      });\n  } catch ({ message }) {\n    console.error(message);\n  }\n\n  return countShips(newState);\n};\n","/**\n * 0 == empty\n * 1 == miss\n * 2 == sank\n * 3 == hit\n * 4 == ship\n */\n\nexport default (state, action) => ({\n  ...state,\n  enemy: [\n    ...action.payload.data.map((row, y) =>\n      row.map((cell, x) => ({\n        id: `cell-${ x }-${ y }-enemy`,\n        miss: cell === 1,\n        sank: cell === 2,\n        hit: cell === 3 || cell === 2,\n        ship: cell === 4 || cell === 3 || cell === 2,\n      }))\n    )\n  ],\n});\n","import shootAroundSankShip from '../functions/shootAroundSankShip';\n\nexport default (state, action) => {\n  const newState = { ...state };\n  const ship = [...action.payload.data];\n  const feedback = action.payload.feedback;\n\n  switch (feedback) {\n    case `miss`: {\n      newState.enemy[ship[0][1]][ship[0][0]].miss = true;\n      break;\n    }\n\n    case `hit`: {\n      newState.enemy[ship[0][1]][ship[0][0]].ship = true;\n      newState.enemy[ship[0][1]][ship[0][0]].hit = true;\n      break;\n    }\n\n    case `sank`: {\n      ship.forEach(item => {\n        newState.enemy[item[1]][item[0]].hit = true;\n        newState.enemy[item[1]][item[0]].ship = true;\n        newState.enemy[item[1]][item[0]].sank = true;\n      });\n      newState.enemy = shootAroundSankShip(newState.enemy, ship);\n      newState.enemyShipsLeft -= 1;\n\n      if (newState.enemyShipsLeft === 0) {\n        newState.feedback = { type: `victory`, data: [...newState.ally] };\n        return newState;\n      }\n\n      break;\n    }\n\n    default:\n      break;\n  }\n  return newState;\n}\n","import makeSea from '../functions/makeSea';\nimport placeShip from '../actions/placeShip';\nimport receiveFire from '../actions/receiveFire';\nimport sendVictory from '../actions/sendVictory';\nimport makeSquadron from '../functions/makeSquadron';\nimport clearFeedback from '../actions/clearFeedback';\nimport randomPlacing from '../actions/randomPlacing';\nimport receiveVictory from '../actions/receiveVictory';\nimport receiveFeedback from '../actions/receiveFeedback';\n\n/**\n * ally            -- your sea\n * enemy           -- your opponent sea\n * squadron        -- see ../scripts/makeSquadron\n * shipsToPlace    -- number of ships to be placed (for triggering 'confirm' state)\n * deckToPlace     -- next deck to be placed ({ type, ship, deck } are indexes of state.squadron[type][ship][deck])\n * allyShipsLeft   -- number of your ships on water (not-sank)\n * enemyShipsLeft  -- number of your opponent ships on water (not-sank)\n * feedback        -- feedback message formed for sending\n */\n\nexport const initialState = () => ({\n  ally: makeSea(`ally`),\n  enemy: makeSea(`enemy`),\n  squadron: makeSquadron(),\n  shipsToPlace: 10,\n  deckToPlace: {\n    type: 0,\n    ship: 0,\n    deck: 0\n  },\n  allyShipsLeft: 10,\n  enemyShipsLeft: 10,\n  feedback: null,\n});\n\nexport default (state = initialState(), action) => {\n  switch (action.type) {\n    case `SEND`:\n      return (\n        action.payload.type === `feedback` ||\n        action.payload.type === `defeat` ||\n        action.payload.type === `victory`\n      )\n        ? clearFeedback(state)\n        : state;\n\n    case `PLACE_SHIP`:\n      return placeShip(state, action);\n\n    case `RANDOM`:\n      return randomPlacing({\n        ...state,\n        ally: makeSea(`ally`),\n        squadron: makeSquadron(),\n      });\n\n    case `RECEIVE`: {\n      switch (action.payload.type) {\n        case `fire`:\n          return receiveFire(state, action);\n\n        case `feedback`:\n          return receiveFeedback(state, action);\n\n        case `victory`:\n          return receiveVictory(state, action);\n\n        case `defeat`:\n          return sendVictory(state, action);\n\n        default:\n          return state;\n      }\n    }\n\n    case `RESET`:\n    case `NEW_ROUND`:\n      return initialState();\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport game from './game';\nimport peer from './peer';\nimport sea from './sea';\n\nconst reducers = combineReducers({\n  game,\n  peer,\n  sea,\n});\n\nexport default reducers;\n","import send from '../actions/send';\nimport receive from '../actions/receive';\nimport setId from '../actions/setId';\nimport setIsClient from '../actions/setIsClient';\nimport setInterface from '../actions/setInterface';\nimport clearMessage from '../actions/clearMessage';\nimport setIsConnected from '../actions/setIsConnected';\nimport setIsInitialised from '../actions/setIsInitialised';\n\n/**\n * id                 -- id on Peer.js\n * message            -- message formed for sending\n * interface          -- Person for pvp and Machine for comp\n * isClient           -- flag shows that current peer did not create session\n * isConnected        -- flag shows that both peers connected to session\n * isInitialised      -- flag shows that current interface was successfully initialized\n * waitingForFeedback -- flag prevents firing more than once at time (happens with slow network)\n * lastSent           -- id of last sent cell (for highlighting in enemy sea)\n * lastReceived       -- id of last received cell (for highlighting in ally sea)\n */\n\n const initialState = () => ({\n  id: ``,\n  message: null,\n  interface: null,\n  isClient: false,\n  isConnected: false,\n  isInitialised: false,\n  waitingForFeedback: false,\n  lastSent: null,\n  lastReceived: null,\n});\n\nexport default (state = initialState(), action) => {\n  switch (action.type) {\n    case `SET_INTERFACE`:\n      return setInterface(state, action);\n\n    case `SEND`:\n      return send(state, action);\n\n    case `CLEAR_MESSAGE`:\n      return clearMessage(state);\n\n    case `READY`:\n      return send(state, { payload: { type: `ready` }});\n\n    case `REPEAT`:\n      return send(state, { payload: { type: `repeat` }});\n\n    case `RECEIVE`:\n      return receive(state, action);\n\n    case `SET_ID`:\n      return setId(state, action);\n\n    case `SET_IS_CLIENT`:\n      return setIsClient(state);\n\n    case `SET_IS_CONNECTED`:\n      return setIsConnected(state);\n\n    case `SET_IS_INITIALISED`:\n      return setIsInitialised(state);\n\n    case `RESET`:\n      return initialState();\n\n    default: return state;\n  }\n};\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(\n    applyMiddleware(thunkMiddleware)\n  )\n);\n\nexport default store;\n","import { initialState } from '../reducers/sea';\nimport sendVictory from '../actions/sendVictory';\nimport receiveFire from '../actions/receiveFire';\nimport randomPlacing from '../actions/randomPlacing';\nimport receiveFeedback from '../actions/receiveFeedback';\n\n/**\n * states:\n * 0 -- shoot random cell (except those that already shoot)\n * 1 -- shoot cell next to last shoot in random direction (except those that already shoot)\n * 2 -- shoot cell next to last shoot in same direction\n * 3 -- shoot cell in opposite side of ship for last hit (in same direction)\n *\n * ╔═══════════════ state diagram ══════════════╗\n * ║                                            ║\n * ║   ┌─────────────>┤___0___│                 ║\n * ║   │                  │                     ║\n * ║   ├<──────────n──╱__hit?__╱                ║\n * ║   │                  │ y                   ║\n * ║   │              │___1___├<────────────┐   ║\n * ║   │                  │                 │   ║\n * ║   │              ╱__hit?__╱            │   ║\n * ║   │              ╱ y     ╲ n           │   ║\n * ║   │             ╱      ╱__sank?__╱──n─>┘   ║\n * ║   │            ╱            │ y            ║\n * ║   │      │___2___├<─────┐   │              ║\n * ║   │          │          │   │              ║\n * ║   │      ╱__hit?__╱──y─>┤   │              ║\n * ║   │          │n         │   │              ║\n * ║   ├<─y──╱__sank?__╱     │   │              ║\n * ║   │          │ n        │   │              ║\n * ║   │      │___3___│      │   │              ║\n * ║   │          │          │   │              ║\n * ║   │      ╱__hit?__╱──y─>┘   │              ║\n * ║   │          │ n            │              ║\n * ║   └<─────────┴──────────────┘              ║\n * ║                                            ║\n * ╚════════════════════════════════════════════╝\n */\n\nexport default class Machine {\n  constructor(props) {\n    this.connect = props.connect;\n    this.post = props.post;\n    this.init();\n  }\n\n  init = (newGame = true) => {\n    this.state = 0;\n    this.shootLog = [];\n    this.lastShoot = null;\n    this.directions = [`up`, `down`, `left`, `right`];\n    this.directionsStack = null;\n    this.sea = randomPlacing(initialState());\n    this.fireDelay = 250; // ::ms\n    newGame && this.connect();\n  };\n\n  changeState = (feedback) => {\n    switch (this.state) {\n      case 0: {\n        feedback === `hit` && (this.state = 1);\n        break;\n      }\n\n      case 1: {\n        this.state = feedback === `hit`\n          ? 2\n          : feedback === `sank`\n            ? 0\n            : 1;\n        break;\n      }\n\n      case 2: {\n        this.state = feedback === `hit`\n          ? 2\n          : feedback === `sank`\n            ? 0\n            : 3;\n        break;\n      }\n\n      case 3: {\n        this.state = feedback === `hit`\n          ? 2\n          : 0;\n        break;\n      }\n\n      default: break;\n    }\n  };\n\n  findLogIndex = (item) =>\n    this.shootLog.findIndex(({ cell }) => cell.toString() === item.toString());\n\n  anotherDirection = (directions) => {\n    let newDirection = Math.floor(Math.random() * 4);\n    while (directions.indexOf(newDirection) !== -1) {\n      newDirection = Math.floor(Math.random() * 4);\n    }\n    return [...directions, newDirection];\n  };\n\n  randomDirectionsStack = () =>\n    [...Array(4)]\n      .reduce(this.anotherDirection, [])\n      .map(item => this.directions[item]);\n\n  reverseDirection = () =>\n    (this.directions.indexOf(this.directionsStack[0]) + 1) % 2 === 0\n      ? this.directions[this.directions.indexOf(this.directionsStack[0]) - 1]\n      : this.directions[this.directions.indexOf(this.directionsStack[0]) + 1];\n\n  findHitIndex = () =>\n    this.shootLog.reduceRight((position, { feedback }, index) =>\n        feedback === `hit`\n          ? position === -1 || position - index === 1\n            ? index\n            : position\n          : position\n      , -1);\n\n  cannotShoot = (coordinates) =>\n    !this.sea.enemy[coordinates[1]] ||\n    !this.sea.enemy[coordinates[1]][coordinates[0]] ||\n    this.sea.enemy[coordinates[1]][coordinates[0]].ship ||\n    this.sea.enemy[coordinates[1]][coordinates[0]].miss;\n\n  addShift = ([x, y], direction, shift) => {\n    switch (direction) {\n      case `up`:\n        return [x, y - shift];\n\n      case `down`:\n        return [x, y + shift];\n\n      case `left`:\n        return [x - shift, y];\n\n      case `right`:\n        return [x + shift, y];\n\n      default:\n        return;\n    }\n  };\n\n  getRandomCoordinates = () => {\n    const randomStock = [];\n    const newCoordinates = () => [\n      Math.floor(Math.random() * 10),\n      Math.floor(Math.random() * 10),\n    ];\n    const hasCoordinates = (array, coordinates) =>\n      array.findIndex(i => i.toString() === coordinates.toString()) >= 0;\n\n    while (true) {\n      const coordinates = newCoordinates();\n      if (hasCoordinates(randomStock, coordinates)) {\n        continue;\n      }\n\n      if (this.cannotShoot(coordinates)) {\n        randomStock.push(coordinates);\n        continue;\n      }\n      return coordinates;\n    }\n  };\n\n  shoot = () => {\n    switch (this.state) {\n      case 0: { // shoot random cell (except those that already shoot)\n        this.lastShoot = this.getRandomCoordinates();\n        break;\n      }\n\n      case 1: { // shoot cell next to last shoot in random direction (except those that already shoot)\n        const hit = this.findHitIndex();\n        if (this.directionsStack === null) {\n          this.directionsStack = this.randomDirectionsStack();\n        } else {\n          this.directionsStack.unshift();\n        }\n\n        if (this.directionsStack.length === 0) {\n          this.directionsStack = null;\n          this.changeState(`sank`);\n          return this.shoot();\n        }\n\n        const nextDirection = this.directionsStack[0];\n        const coordinates = this.addShift(this.shootLog[hit].cell, nextDirection, 1);\n\n        if (\n          this.cannotShoot(coordinates) ||\n          coordinates[0] < 0 ||\n          coordinates[0] > 9 ||\n          coordinates[1] < 0 ||\n          coordinates[1] > 9\n        ) {\n          this.directionsStack.shift();\n          return this.shoot();\n        }\n\n        this.lastShoot = coordinates;\n        // this.lastDirection = nextDirection;\n        break;\n      }\n\n      case 2: { // shoot cell next to last shoot in same direction\n        const nextDirection = this.directionsStack[0];\n        const coordinates = this.addShift(this.lastShoot, nextDirection, 1);\n\n        if (\n          this.cannotShoot(coordinates) ||\n          coordinates[0] < 0 ||\n          coordinates[0] > 9 ||\n          coordinates[1] < 0 ||\n          coordinates[1] > 9\n        ) {\n          this.changeState(`miss`);\n          return this.shoot();\n        }\n\n        this.lastShoot = coordinates;\n        break;\n      }\n\n      case 3: { // shoot cell in opposite side of ship to last hit (in same direction)\n        const nextDirection = this.reverseDirection();\n        const hit = this.findHitIndex();\n        let coordinates = this.addShift(this.shootLog[hit].cell, nextDirection, 1);\n\n        while (this.cannotShoot(coordinates)) {\n          coordinates = this.addShift(coordinates, nextDirection, 1)\n        }\n\n        this.lastShoot = coordinates;\n        this.directionsStack = [nextDirection];\n        break;\n      }\n\n      default:\n        return;\n    }\n\n    this.shootLog.push({ cell: this.lastShoot });\n    setTimeout(() => {\n      this.post({ type: `fire`, data: this.lastShoot })\n    }, this.fireDelay);\n  };\n\n  send = (data) => {\n    switch (data.type) {\n      case `fire`: {\n        this.sea = receiveFire(this.sea, { payload: data });\n        this.post(this.sea.feedback);\n        this.sea.feedback.feedback === `miss` && this.shoot();\n        this.sea.feedback = null;\n        break;\n      }\n\n      case `feedback`: {\n        this.sea = receiveFeedback(this.sea, { payload: data });\n        const logIndex = this.findLogIndex(this.lastShoot);\n        this.shootLog[logIndex].feedback = data.feedback;\n        this.changeState(data.feedback);\n\n        if (data.feedback === `sank`) {\n          this.directionsStack = null;\n        }\n\n        data.feedback !== `miss` && this.shoot();\n        break;\n      }\n\n      case `defeat`: {\n        this.sea = sendVictory(this.sea);\n        this.post(this.sea.feedback);\n        this.post({ type: `repeat` });\n        this.init(false);\n        break;\n      }\n\n      case `ready`: {\n        this.post({ type: `ready` });\n        break;\n      }\n\n      case `victory`: {\n        this.post({ type: `repeat` });\n        this.init(false);\n        break;\n      }\n\n      default:\n        break;\n    }\n  };\n};\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Wrapper = styled.div`\n  margin: 8px;\n  width: calc(50vmin - 20px);\n  height: calc(50vmin - 20px);\n  min-width: 292px;\n  min-height: 292px;\n  box-sizing: border-box;\n  border: 2px solid ${ props => props.move ? css`var(--yellow)` : css`var(--olive)` };\n  background-color: ${ props => props.move ? css`var(--silver)` : css`var(--gray)` };\n  overflow: hidden;\n`;\n\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  display: grid;\n  grid-gap: 1px;\n  grid-template: repeat(10, 1fr) / repeat(10, 1fr);\n`;\n\nexport default ({ move, children }) =>\n  <Wrapper move={ move }>\n    <Content move={ move } children={ children } />\n  </Wrapper>\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Cell = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  background-color: var(--blue);\n  color: ${ props => props.last ? css`var(--aqua)` : css`var(--gray)` };\n\n  ${\n    props => props.ship && css`\n      :after {\n        content: '';\n        width: 60%;\n        height: 50%;\n        background-color: ${\n          props.last\n            ? css`var(--aqua)`\n            : props.sank\n                ? css`var(--gray)`\n                : !props.isCompleted || props.hit\n                  ? css`var(--silver)`\n                  : css`var(--white)`\n        };\n      }\n    `\n  }\n`;\n\nexport default (props) =>\n  <Cell {...props}>{ props.miss && `*` }</Cell>\n","import getShip from './getShip';\n\nexport default ({ cell, squadron }) => {\n  if (!cell) return false;\n\n  const [type, ship] = getShip(cell);\n\n  return squadron[type][ship].reduce(\n    (completed, deck) => completed ? deck !== null : false,\n    true\n  );\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Sea from './Sea';\nimport Cell from './Cell';\nimport isShipPlaced from '../functions/isShipPlaced';\n\nconst Ally = (props) =>\n  <Sea move={ props.game.status === `place` || props.game.status === `confirm` || !props.game.move }>\n    {\n      props.sea.ally.map(row =>\n        row.map(({ id, ship, hit, miss, sank }) =>\n          <Cell\n            key={ id }\n            id={ id }\n            last={ id === props.peer.lastReceived }\n            ship={ ship }\n            hit={ hit }\n            miss={ miss }\n            sank={ sank }\n            isCompleted={ isShipPlaced({ cell: ship, squadron: props.sea.squadron }) }\n            onClick={ () => { ((props.game.status === `place` || props.game.status === `confirm`) && (props.sea.shipsToPlace > 0 || ship)) && props.place(id) }}\n          />\n        )\n      )\n    }\n  </Sea>;\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n  peer: state.peer,\n  sea: state.sea,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  place: (payload) => dispatch({ type: `PLACE_SHIP`, payload }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ally);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Sea from './Sea';\nimport Cell from './Cell';\n\nconst Enemy = (props) =>\n  <Sea move={ props.game.move }>\n    {\n      props.sea.enemy.map(row =>\n        row.map(({ id, ship, hit, miss, sank }) =>\n          <Cell\n            key={ id }\n            id={ id }\n            last={ id === props.peer.lastSent }\n            ship={ ship }\n            hit={ hit }\n            miss={ miss }\n            sank={ sank }\n            onClick={ () => { props.game.status === `play` && props.game.move && !props.peer.waitingForFeedback && !hit && !miss && props.fire(id) }}\n            enemy\n          />\n        )\n      )\n    }\n  </Sea>;\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n  peer: state.peer,\n  sea: state.sea,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fire: (payload) => dispatch({ type: `SEND`, payload: { type: `fire`, data: payload }}),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Enemy);\n","import styled from 'styled-components';\n\nexport default styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  justify-content: center;\n`;\n","import Peer from 'peerjs';\n\nexport default class Person {\n  constructor(props) {\n    this.disconnect = props.disconnect;\n    this.initialised = props.initialised;\n    this.client = props.client;\n    this.setId = props.setId;\n    this.open = props.open;\n    this.data = props.data;\n    this.options = {\n      reliable: true,\n      serialization: 'json',\n    };\n    this.init();\n  }\n\n  close = () => {\n    this.connection = null;\n    this.disconnect();\n  };\n\n  init = () => {\n    this.peer = new Peer();\n    this.connection = null;\n    this.lastPeerID = null;\n    this.initialised();\n\n    this.peer.on('open', () => {\n      if (this.peer.id === null) {\n        this.peer.id = this.lastPeerID;\n      } else {\n        this.lastPeerID = this.peer.id;\n      }\n      this.setId(this.peer.id);\n    });\n\n    this.peer.on('connection', (c) => {\n      if (this.connection) {\n        c.on('open', c.close);\n        return;\n      }\n\n      this.connection = c;\n      this.ready();\n    });\n\n    this.peer.on('disconnected', () => {\n      this.peer.id = this.lastPeerID;\n      this.peer._lastServerID = this.lastPeerID;\n      this.peer.reconnect();\n    });\n\n    this.peer.on('close', this.close);\n    this.peer.on('error', this.close);\n  };\n\n  join = (id) => {\n    this.connection = this.peer.connect(id, this.options);\n    this.client();\n    this.ready();\n  };\n\n  ready = () => {\n    this.connection.on('open', this.open);\n    this.connection.on('data', this.data);\n    this.connection.on('close', this.close);\n  };\n\n  send = (data) => {\n    this.connection && this.connection.open && this.connection.send(data);\n  };\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst blink = keyframes`\n  0% { opacity: 1 }\n  50% { opacity: 1 }\n  51% { opacity: 0 }\n  to { opacity: 0 }\n`;\n\nconst Input = styled.input.attrs({\n  type: `text`,\n  size: 17,\n  maxLength: 16,\n})`\n  margin: 0;\n  padding: 0 0 0 4px;\n  height: 16px;\n  min-width: 0;\n  position: relative;\n  z-index: 1;\n  background: none;\n  caret-color: transparent;\n`;\n\nconst Caret = styled.div`\n  position: absolute;\n  top: 0;\n  right: ${ props => 147 - props.caret * 9 }px;\n  animation: ${ blink } 1s linear infinite;\n`;\n\nconst Placeholder = styled.div`\n  position: absolute;\n  top: 0;\n  right: 3px;\n  z-index: 1;\n`;\n\nconst Background = styled.div`\n  position: relative;\n  background-color: var(--black);\n  color: var(--white);\n  overflow: hidden;\n\n  ${ Input }:not(:focus) + ${ Caret } {\n    display: none;\n  }\n`;\n\nconst Wrapper = styled.div`\n  margin: 16px auto;\n  display: flex;\n  flex-flow: row;\n  justify-content: center;\n`;\n\nexport default ({ onInput, readonly = false, submit, symbols, value = `` }) => {\n  const input = useRef(null);\n  const [caret, setCaret] = useState(symbols);\n  const moveCaret = (event) => {\n    if (event.type === `keydown` && event.key === `Enter`) {\n      submit();\n    } else {\n      setCaret(event.target.selectionEnd);\n    }\n  };\n\n  !readonly && useEffect(\n    () => {\n      input.current.focus();\n    },// eslint-disable-next-line\n    []\n  );\n\n  const inputProps = readonly\n    ? {\n      onChange: (event) => event.preventDefault(),\n      value,\n    }\n    : {\n      onClick: moveCaret,\n      onKeyUp: moveCaret,\n      onPaste: moveCaret,\n      onChange: moveCaret,\n      onKeyDown: moveCaret,\n      onInput,\n    };\n\n  return (\n    <Wrapper>\n      [\n      <Background>\n        <Placeholder>{ `·`.repeat(17 - symbols) }</Placeholder>\n        <Input ref={ input } { ...inputProps } />\n        { !readonly && <Caret caret={ caret }>_</Caret> }\n      </Background>\n      ]\n    </Wrapper>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  padding: 0 16px;\n  height: 16px;\n  min-width: 60px;\n  background-color: var(--white);\n  box-shadow: 8px 8px 0 var(--black);\n  color: var(--gray);\n\n  & + & {\n    margin-left: 24px;\n  }\n\n  :focus {\n    background-color: var(--yellow);\n    color: var(--maroon);\n  }\n\n  span {\n    color: var(--black);\n  }\n`;\n\nexport default ({ autoFocus, className, onClick, text = ``, index }) =>\n  <Button\n    autoFocus={ autoFocus }\n    className={ className }\n    onClick={ typeof onClick === `function` ? onClick : undefined }\n  >\n    {\n      index === undefined\n        ? text\n        : [\n          text.substring(0, index),\n          <span key={ text }>{ text[index] }</span>,\n          text.substring(index + 1)\n        ]\n    }\n  </Button>\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport Person from '../classes/Person';\nimport Input from './Input';\nimport Button from './Button';\n\nconst Wrapper = styled.div`\n  margin: 16px 0;\n  padding: 8px 4px;\n  width: 320px;\n  max-width: 80%;\n  position: relative;\n  background-color: var(--teal);\n  box-shadow: 16px 16px 0 var(--black);\n  color: var(--black);\n\n  :before {\n    content: '${ props => props.title_ }';\n    padding: 0 8px;\n    position: absolute;\n    top: 2px;\n    left: 50%;\n    width: max-content;\n    height: 16px;\n    background-color: inherit;\n    color: inherit;\n    transform: translateX(-50%);\n    z-index: 1;\n  }\n`;\n\nconst Content = styled.div`\n  padding: 32px 0;\n  height: 100%;\n  box-sizing: border-box;\n  min-height: 294px;\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  justify-content: center;\n  border: 3px double var(--black);\n`;\n\nconst Buttons = styled.div`\n  margin-top: 32px;\n`;\n\nconst Select = (props) => {\n  const [peerId, setPeerId] = useState(``);\n\n  const join = () => {\n    peerId &&\n    peerId !== `` &&\n    peerId !== props.peer.id &&\n    props.peer.interface.join(peerId);\n  };\n\n  const handleInput = ({ target: { value }}) => {\n    setPeerId(value);\n  };\n\n  const back = () => {\n    setPeerId(``);\n    props.handleDisconnect();\n  };\n\n  useEffect(\n    () => {\n      if (props.game.status !== `connect`) return;\n\n      props.peer.interface === null && props.setInterface(\n        new Person({\n          disconnect: props.disconnect,\n          initialised: props.initialised,\n          client: props.client,\n          setId: props.setId,\n          open: props.open,\n          data: props.data,\n        })\n      );\n    },\n    [props]\n  );\n\n  switch (props.game.status) {\n    case `choose`:\n      return (\n        <Wrapper title_={ `select game type` }>\n          <Content>\n            <p>you want to play with</p>\n            <Buttons>\n              <Button autoFocus onClick={ () => { props.selectType(true) }} text={ `person` } index={ 0 } />\n              <Button onClick={ () => { props.selectType(false) }} text={ `computer` } index={ 0 } />\n            </Buttons>\n          </Content>\n        </Wrapper>\n      );\n\n    case `connect`:\n      return props.peer.id === ``\n        ? (\n          <Wrapper title_={ `connect to remote player` }>\n            <Content>please wait</Content>\n          </Wrapper>\n        )\n        : (\n          <Wrapper title_={ `connect to remote player` }>\n            <Content>\n              <label>share this code<br />with someone<br />you want to play:</label>\n              <Input symbols={ props.peer.id.length } value={ props.peer.id } readonly />\n              <label>or paste code that<br />was shared to you:</label>\n              <Input onInput={ handleInput } submit={ join } symbols={ peerId.length } />\n              <Buttons>\n                <Button onClick={ join } text={ `connect` } />\n                <Button onClick={ back } text={ `back` } />\n              </Buttons>\n            </Content>\n          </Wrapper>\n        );\n\n    default: return null;\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n  peer: state.peer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  disconnect: () => dispatch({ type: `RESET` }),\n  client: () => dispatch({ type: `SET_IS_CLIENT` }),\n  setId: (payload) => dispatch({ type: `SET_ID`, payload }),\n  data: (payload) => dispatch({ type: `RECEIVE`, payload }),\n  open: () => dispatch({ type: 'SET_IS_CONNECTED' }),\n  initialised: () => dispatch({ type: `SET_IS_INITIALISED` }),\n  setInterface: (payload) => dispatch({ type: `SET_INTERFACE`, payload }),\n  selectType: (network) => dispatch({ type: `SELECT_TYPE`, payload: network }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Select);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport Button from './Button';\n\nconst Wrapper = styled.div`\n  padding: 8px 4px;\n  margin: 8px 24px 24px 8px;\n  width: calc(50vmin - 36px);\n  height: calc(50vmin - 36px);\n  min-width: 276px;\n  min-height: 276px;\n  box-sizing: border-box;\n  position: relative;\n  background-color: var(--gray);\n  box-shadow: 16px 16px 0 var(--black);\n  color: var(--white);\n\n  :before {\n    content: '${ props => props.title_ }';\n    padding: 0 8px;\n    position: absolute;\n    top: 2px;\n    left: 50%;\n    width: max-content;\n    height: 16px;\n    background-color: inherit;\n    color: inherit;\n    transform: translateX(-50%);\n    z-index: 1;\n  }\n`;\n\nconst Content = styled.div`\n  padding: 16px 0 0;\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  justify-content: flex-start;\n  border: 3px double var(--white);\n\n  hr {\n    margin: 8px 0;\n    border: 0;\n    outline: 0;\n    width: 100%;\n    height: 1px;\n    background-color: var(--white);\n  }\n`;\n\nconst ShipsLeft = styled.div`\n  margin-top: 8px;\n  display: grid;\n  grid-gap: 1px;\n  grid-template: repeat(7, auto) / repeat(8, auto);\n`;\n\nconst StyledDeck = styled.div`\n  width: calc(5vmin - 2px);\n  height: calc(5vmin - 2px);\n  min-width: 29px;\n  min-height: 29px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--blue);\n\n  ${\n    props => !props.isPlaced && css`\n      :after {\n        content: '';\n        width: 60%;\n        height: 50%;\n        background-color: ${\n          props.isNext\n            ? css`var(--aqua)`\n            : css`var(--white)`\n        };\n      }\n    `\n  }\n`;\n\nconst Space = styled.div`\n  width: 0;\n  height: 0;\n`;\n\nconst Buttons = styled.div`\n  margin-top: -8px;\n  flex-grow: 1;\n  display: flex;\n  flex-flow: row;\n  align-items: center;\n`;\n\nconst Placing = (props) => {\n  const isPlaced = ({ type, ship, deck }) =>\n    props.sea.squadron[type][ship][deck] !== null;\n\n  const Deck = ({ type, ship, deck }) =>\n    <StyledDeck\n      isNext={\n        props.sea.deckToPlace.type === type &&\n        props.sea.deckToPlace.ship === ship &&\n        props.sea.deckToPlace.deck === deck\n      }\n      isPlaced={ isPlaced({ type, ship, deck }) }\n    />;\n\n  return (\n    <Wrapper title_={ `place your ships` }>\n      <Content>\n        click on field to place<br />or delete ship deck<hr />ships left:\n        <ShipsLeft>\n          {\n            [...Array(7)].reduce(\n              (heap, _, y) => y % 2 !== 0\n                ? [...heap, ...[...Array(8).keys()].map((x) => <Space key={ `${ x }-${ y }` } />)]\n                : [...heap, ...props.sea.squadron[y / 2].reduce(\n                    (row, ship, index) => {\n                      const i = index > 0\n                        ? props.sea.squadron[y / 2][index - 1].length * index + index\n                        : index;\n                      for (let deck = 0; deck < ship.length; deck++) {\n                        row[deck + i] = <Deck key={ `${ y / 2 }-${ index }-${ deck }` } type={ y / 2 } ship={ props.sea.squadron[y / 2].length - index - 1 } deck={ ship.length - deck - 1 } />;\n                      }\n                      return row\n                    },\n                  [...Array(8)].map((_, x) => <Space key={ `${ x }-${ y }` } />)\n                )],\n              [],\n            )\n          }\n        </ShipsLeft>\n        <hr />\n        <Buttons>\n          <Button text={ `random` } index={ 0 } onClick={ props.random } autoFocus />\n          <Button text={ `confirm` } index={ 0 } onClick={ props.game.status === `confirm` && props.ready } />\n        </Buttons>\n      </Content>\n    </Wrapper>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n  sea: state.sea,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  ready: () => dispatch({ type: `READY` }),\n  random: () => dispatch({ type: `RANDOM` }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Placing);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport Button from './Button';\n\nconst Window = styled.div`\n  margin: 8px;\n  width: calc(50vmin - 20px);\n  height: calc(50vmin - 20px);\n  min-width: 292px;\n  min-height: 292px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Wrapper = styled.div`\n  padding: 8px 4px;\n  margin: -16px 0 0 -16px;\n  width: 270px;\n  height: 270px;\n  box-sizing: border-box;\n  position: relative;\n  background-color: var(--teal);\n  box-shadow: 16px 16px 0 var(--black);\n  color: var(--black);\n\n  :before {\n    content: '${ props => props.title_ }';\n    padding: 0 8px;\n    position: absolute;\n    top: 2px;\n    left: 50%;\n    width: max-content;\n    height: 16px;\n    background-color: inherit;\n    color: inherit;\n    transform: translateX(-50%);\n    z-index: 1;\n  }\n`;\n\nconst Content = styled.div`\n  padding: 16px 0;\n  height: 100%;\n  box-sizing: border-box;\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  justify-content: space-between;\n  border: 3px double var(--black);\n`;\n\nconst Text = styled.div`\n  margin-top: 4em;\n  width: 100%;\n  line-height: 2.5em;\n  text-align: center;\n`;\n\nconst Buttons = styled.div`\n`;\n\nconst Modal = (props) => {\n  const resultText = {\n    victory: `you win!`,\n    defeat: `you loose!`,\n  };\n\n  switch (props.game.status) {\n    case `defeat`:\n    case `victory`:\n      return props.game.isAllyWantRepeat\n        ? (\n          <Window>\n            <Wrapper title_={ resultText[props.game.status] }>\n              <Content>\n                <Text>\n                  please wait for your opponent to answer\n                </Text>\n              </Content>\n            </Wrapper>\n          </Window>\n        )\n        : (\n          <Window>\n            <Wrapper title_={ resultText[props.game.status] }>\n              <Content>\n                <Text>\n                  { !props.game.isAllyWantRepeat && `play another round?` }<br />\n                  { props.game.type === `pvp` && props.game.isEnemyWantRepeat && `your opponent insist` }\n                </Text>\n                <Buttons>\n                  <Button text={ `yes` } index={ 0 } onClick={ props.repeat } autoFocus />\n                  <Button text={ `no` } index={ 0 } onClick={ props.reset } />\n                </Buttons>\n              </Content>\n            </Wrapper>\n          </Window>\n        );\n\n    case `wait`:\n      return (\n        <Window>\n          <Wrapper title_={ `please wait` }>\n            <Content>\n              <Text>\n                your opponent<br/>placing their ships\n              </Text>\n            </Content>\n          </Wrapper>\n        </Window>\n      );\n\n    default:\n      return null;\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  repeat: () => dispatch({ type: `REPEAT` }),\n  reset: () => dispatch({ type: `RESET` }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Ally from './Ally';\nimport Enemy from './Enemy';\nimport Ocean from './Ocean';\nimport Select from './Select';\nimport Placing from './Placing';\nimport Modal from './Modal';\n\nconst Game = (props) => {\n  switch (props.status) {\n    case `choose`:\n    case `connect`:\n      return <Select />;\n\n    case `place`:\n    case `confirm`:\n      return (\n        <Ocean>\n          <Ally />\n          <Placing />\n        </Ocean>\n      );\n\n    case `victory`:\n    case `wait`:\n      return (\n        <Ocean>\n          <Ally />\n          <Modal />\n        </Ocean>\n      );\n\n    case `play`:\n      return (\n        <Ocean>\n          <Ally />\n          <Enemy />\n        </Ocean>\n      );\n\n    case `defeat`:\n      return (\n        <Ocean>\n          <Modal />\n          <Enemy />\n        </Ocean>\n      );\n\n    default:\n      return null;\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  status: state.game.status,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Machine from '../classes/Machine';\nimport Game from './Game';\n\nconst App = (props) => {\n  const handleKeyPress = (event) => {\n    const key = event.key.toLowerCase();\n\n    switch (props.game.status) {\n      case `choose`: {\n        key === `p` && props.selectType(true);\n        key === `c` && props.selectType(false);\n        break;\n      }\n\n      case `place`: {\n        key === `r` && props.random();\n        break;\n      }\n\n      case `confirm`: {\n        key === `r` && props.random();\n        key === `c` && props.ready();\n        break;\n      }\n\n      case `defeat`:\n      case `victory`: {\n        key === `y` && props.repeat();\n        key === `n` && props.reset();\n        break;\n      }\n\n      default: break;\n    }\n  };\n\n  useEffect(\n    () => {\n      document.removeEventListener(`keypress`, handleKeyPress);\n\n      switch (props.game.status) {\n        case `choose`: {\n          document.addEventListener(`keypress`, handleKeyPress);\n          break;\n        }\n\n        case `connect`: {\n          if (props.peer.isConnected) {\n            props.setMove(props.peer.isClient);\n            props.changeStatus(`place`);\n          }\n          break;\n        }\n\n        case `place`: {\n          props.game.type === `comp` && props.peer.interface === null && props.setInterface(\n            new Machine({\n              connect: props.connect,\n              post: props.post,\n            })\n          );\n\n          props.sea.shipsToPlace === 0 && props.changeStatus(`confirm`);\n          document.addEventListener(`keypress`, handleKeyPress);\n          break;\n        }\n\n        case `confirm`: {\n          if (props.sea.shipsToPlace !== 0) {\n            props.changeStatus(`place`);\n            break;\n          }\n\n          if (props.game.isAllyReady) {\n            props.changeStatus(props.game.isEnemyReady ? `play` : `wait`);\n            break;\n          }\n\n          document.addEventListener(`keypress`, handleKeyPress);\n          break;\n        }\n\n        case `wait`: {\n          props.game.isEnemyReady && props.changeStatus(`play`);\n          break;\n        }\n\n        case `play`: {\n          break;\n        }\n\n        case `defeat`:\n        case `victory`: {\n          if (props.game.isAllyWantRepeat) {\n            props.game.isEnemyWantRepeat && props.newRound();\n            break;\n          }\n\n          document.addEventListener(`keypress`, handleKeyPress);\n          break;\n        }\n\n        default: break;\n      }\n\n      if (props.peer.message) {\n        props.peer.interface.send(props.peer.message);\n        props.clearMessage();\n      } else if (props.sea.feedback) {\n        props.send(props.sea.feedback);\n      }\n\n      return () => document.removeEventListener(`keypress`, handleKeyPress);\n    },// eslint-disable-next-line\n    [props]\n  );\n\n  return <Game />;\n};\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n  peer: state.peer,\n  sea: state.sea,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  changeStatus: (status) => dispatch({ type: `CHANGE_STATUS`, payload: status }),\n  selectType: (network) => dispatch({ type: `SELECT_TYPE`, payload: network }),\n  setInterface: (payload) => dispatch({ type: `SET_INTERFACE`, payload }),\n  setMove: (payload) => dispatch({ type: `SET_MOVE`, payload }),\n  post: (payload) => dispatch({ type: `RECEIVE`, payload }),\n  clearMessage: () => dispatch({ type: `CLEAR_MESSAGE` }),\n  send: (payload) => dispatch({ type: `SEND`, payload }),\n  connect: () => dispatch({ type: 'SET_IS_CONNECTED' }),\n  newRound: () => dispatch({ type: `NEW_ROUND` }),\n  random: () => dispatch({ type: `RANDOM` }),\n  repeat: () => dispatch({ type: `REPEAT` }),\n  ready: () => dispatch({ type: `READY` }),\n  reset: () => dispatch({ type: `RESET` }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './fonts/fonts.css';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './components/App';\n\nReactDOM.render(\n  <Provider store={ store }><Router><Route path='/' component={ App } /></Router></Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
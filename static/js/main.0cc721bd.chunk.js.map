{"version":3,"sources":["../node_modules/peerjs/dist sync","actions/ready.js","actions/repeat.js","actions/setMove.js","actions/selectType.js","actions/changeStatus.js","actions/receiveReady.js","actions/receiveRepeat.js","reducers/game.js","scripts/getCoordinates.js","actions/send.js","actions/setRTC.js","actions/receive.js","actions/setPeerID.js","actions/clearMessage.js","actions/setIsConnected.js","actions/setIsInitialised.js","scripts/makeSea.js","scripts/getShip.js","scripts/countShips.js","scripts/makeDeck.js","scripts/removeDeck.js","scripts/isThereShip.js","actions/placeShip.js","scripts/isThereShipDiagonally.js","scripts/isThereShipInCross.js","scripts/shootAroundSankShip.js","actions/receiveFire.js","scripts/itSank.js","actions/sendVictory.js","scripts/makeSquadron.js","actions/clearFeedback.js","actions/randomPlacing.js","actions/receiveVictory.js","actions/receiveFeedback.js","reducers/sea.js","reducers/index.js","reducers/rtc.js","store.js","scripts/AI.js","components/Sea.js","components/Cell.js","components/Ally.js","components/Enemy.js","components/Ocean.js","scripts/RTC.js","components/TextButton.js","components/Select.js","components/Label.js","components/Placing.js","components/TextBlock.js","components/Game.js","components/App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","state","isAllyReady","isAllyWantRepeat","move","action","status","payload","type","isEnemyReady","isEnemyWantRepeat","initialState","match","map","item","parseInt","message","data","getCoordinates","console","log","JSON","parse","stringify","waitingForFeedback","peerID","isConnected","isInitialised","ten","Array","y","x","hit","miss","ship","sank","string","split","count","length","reduce","a","b","shipsToPlace","fourDecker","squadron","threeDecker","twoDecker","singleDecker","numbers","Object","values","total","currentType","findIndex","deck","coordinates","toStart","newState","pop","unshift","forEach","index","ally","countShips","splice","push","sea","thereIsShip","isThereShip","getShip","removeDeck","isThereShipDiagonally","thereIsShipInCross","filter","i","isThereShipInCross","newDeck","makeDeck","newSea","newShip","xsLength","ysLength","condition","head","shoot","feedback","itSank","allyShipsLeft","shootAroundSankShip","row","cell","h","_","shifts","brandNewState","direction","Math","round","random","getRandomCoordinates","floor","undefined","error","place","enemy","enemyShipsLeft","makeSea","makeSquadron","reducers","combineReducers","game","selectType","changeStatus","ready","repeat","setMove","receiveReady","receiveRepeat","rtc","interface","isClient","setRTC","send","clearMessage","receive","setPeerID","setIsConnected","setIsInitialised","clearFeedback","placeShip","randomPlacing","receiveFire","receiveFeedback","receiveVictory","sendVictory","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","AI","props","this","init","newGame","shootLog","lastShoot","directions","directionsStack","fireDelay","sendMessage","findLogIndex","toString","randomDirectionsStack","array","indexOf","reverseDirection","findHitIndex","reduceRight","position","alreadyShoot","addShift","shift","randomStock","hasCoordinates","changeState","nextDirection","setTimeout","logIndex","Wrapper","styled","div","border","Content","grid","children","Cell","css","times","params","className","onClick","connect","dispatch","Sea","key","fire","RTC","lastPeerID","peer","Peer","connection","on","c","close","reconnect","handleDisconnect","join","reliable","serialization","open","span","StyledSelect","Output","input","attrs","Input","Button","button","network","useRef","output","useState","changed","setChanged","selected","setSelected","current","value","useEffect","select","ref","onChange","event","preventDefault","onSelect","onKeyPress","TextButton","label","HintLabel","Confirm","Label","Ship","Deck","column","Times","Number","PlacingSea","PlacingShip","decks","number","Wait","Result","Repeat","Ready","resultText","victory","defeat","reset","Ocean","newRound","ReactDOM","render","path","component","App","document","getElementById"],"mappings":"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","file":"static/js/main.0cc721bd.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 47;","export default (state) => ({\n  ...state,\n  isAllyReady: true,\n});\n","export default (state) => ({\n  ...state,\n  isAllyWantRepeat: true,\n});\n","export default (state) => ({\n  ...state,\n  move: !state.move,\n});\n","export default (state, action) => ({\n  ...state,\n  status: action.payload ? `connect` : `place`,\n  type: action.payload ? `pvp` : `comp`,\n  move: action.payload ? state.move : true,\n});\n","export default (state, action) => ({\n  ...state,\n  status: action.payload,\n});\n","export default (state) => ({\n  ...state,\n  isEnemyReady: true,\n});\n","export default (state) => ({\n  ...state,\n  isEnemyWantRepeat: true,\n});\n","import ready from '../actions/ready';\nimport repeat from '../actions/repeat';\nimport setMove from '../actions/setMove';\nimport selectType from '../actions/selectType';\nimport changeStatus from '../actions/changeStatus';\nimport receiveReady from '../actions/receiveReady';\nimport receiveRepeat from '../actions/receiveRepeat';\n\n/**\n * game statuses:\n * choose  -- it's waiting for game type to be chosen\n * connect -- it's waiting for opponent to connect\n * place   -- it's waiting for all ships to be placed (switched automatically)\n * confirm -- it's waiting for confirm of ship placement\n * wait    -- it's waiting for opponent to confirm ship placement\n * play    -- it's waiting till there were no ships in any of seas\n * victory -- it's waiting for confirmation of new round\n * defeat  -- same as victory\n *\n * game types:\n * pvp  -- you versus someone on network\n * comp -- you versus computer\n *\n * isAllyReady  -- flag shows that you confirmed ship placement\n * isEnemyReady -- flag shows that your opponent confirmed ship placement\n *\n * isAllyWantRepeat  -- flag shows that you agreed on another round\n * isEnemyWantRepeat -- flag shows that your opponent agreed on another round\n *\n * move -- flag shows if it's your turn to fire (in comp type you always start first)\n */\n\nconst initialState = (status = `choose`, move = false) => ({\n  type: null,\n  isAllyReady: false,\n  isEnemyReady: false,\n  isAllyWantRepeat: false,\n  isEnemyWantRepeat: false,\n  status,\n  move,\n});\n\nexport default (state = initialState(), action) => {\n  switch (action.type) {\n    case `SELECT_TYPE`:\n      return selectType(state, action);\n\n    case `CHANGE_STATUS`:\n      return changeStatus(state, action);\n\n    case `READY`:\n      return ready(state);\n\n    case `REPEAT`:\n      return repeat(state);\n\n    case `SEND`: {\n      switch (action.payload.type) {\n        case `feedback`:\n          return action.payload.feedback === `miss`\n            ? setMove(state)\n            : state;\n\n        case `victory`:\n          return changeStatus(state, { payload: `victory` });\n\n        default:\n          return state;\n      }\n    }\n\n    case `RECEIVE`: {\n      switch (action.payload.type) {\n        case `ready`:\n          return receiveReady(state);\n\n        case `repeat`:\n          return receiveRepeat(state);\n\n        case `feedback`:\n          return action.payload.feedback === `miss`\n            ? setMove(state)\n            : state;\n\n        case `victory`:\n          return changeStatus(state, { payload: `defeat` });\n\n        default:\n          return state;\n      }\n    }\n\n    case `SET_MOVE`:\n      return action.payload\n        ? setMove(state)\n        : state;\n\n    case `RESET`:\n      return initialState();\n\n    case `NEW_ROUND`:\n      return initialState(`place`, state.type === 'pvp' ? !state.move : true);\n\n    default:\n      return state;\n  }\n}\n","/**\n * input: `cell-3-4-ally`\n * output: [3, 4]\n */\n\n/**\n * choose less fucked up version:\n  */\n// export default (id) => id.split('-').reduce((a, i) => +i ? [ ...a, +i] : a, []);\nexport default (id) => id.match(/\\d+-/g).map(item => parseInt(item));\n","import getCoordinates from '../scripts/getCoordinates';\n\nexport default (state, action) => {\n  const message = action.payload.type === `fire`\n    ? { type: `fire`, data: getCoordinates(action.payload.data) }\n    : { ...action.payload };\n\n  console.log(`sent:     `, JSON.parse(JSON.stringify(message)));\n\n  return {\n    ...state,\n    message,\n    waitingForFeedback: action.payload.type === `fire`,\n  };\n}\n","export default (state, action) => ({\n  ...state,\n  ...action.payload,\n});\n","export default (state, action) => {\n  console.log(`received: `, JSON.parse(JSON.stringify(action.payload)));\n\n  return {\n    ...state,\n    waitingForFeedback: false,\n  };\n}\n","export default (state, action) => ({\n  ...state,\n  peerID: action.payload,\n});\n","export default (state) => ({ ...state, message: null });\n","export default (state, action) => ({\n  ...state,\n  isConnected: action.payload,\n});\n","export default (state, action) => ({\n  ...state,\n  isInitialised: action.payload,\n});\n","export default (type) => {\n  const ten = [...Array(10).keys()];\n\n  return ten.map(y =>\n    ten.map(x =>\n      ({\n        id: `cell-${ x }-${ y }-${ type }`,\n        hit: false,\n        miss: false,\n        ship: false,\n        sank: false,\n      })\n    )\n  );\n};\n","/**\n * input: `1-2-3`\n * output: [1, 2, 3]\n */\n\nexport default (string) => string.split(`-`).map(item => parseInt(item));\n","/**\n * counting ships to be placed\n * takes every ship in array 'type',\n * if ship has null as element - returns 1 (as one that need placement),\n * if not -- 0 (as placed).\n * then returns number of ships that not placed\n */\n\nconst count = (type) => type\n  .map(item =>                  // let's take a ship\n    item[0] === null            // i'ts first deck empty?\n      ? 1                       // it should be placed\n      : item.length === 1       // it's single decker?\n      ? 0                       // nothing to do here\n      : item.reduce((a, b) =>   // let's look at all it's decks\n        a === 1                 // was there empty deck earlier?\n          ? 1                   // there was, keep it to the end\n          : b === null          // is this deck empty?\n            ? 1                 // it should be placed\n            : 0                 // nothing to do here\n      )\n  )\n  .reduce((a, b) => a + b);     // sum of all ships that need to be placed\n\nexport default (state) => {\n  const shipsToPlace = {\n    fourDecker: count(state.squadron[0]),\n    threeDecker: count(state.squadron[1]),\n    twoDecker: count(state.squadron[2]),\n    singleDecker: count(state.squadron[3]),\n  };\n\n  const numbers = Object.values(shipsToPlace);\n  shipsToPlace.total = numbers.reduce((a, b) => a + b);\n  const currentType = numbers.findIndex(a => a !== 0);\n\n  return {\n    ...state,\n    shipsToPlace,\n    currentType,\n  };\n}\n","import countShips from './countShips';\n\n/**\n * adding new deck to the ship;\n * renewing 'ship' parameter of all cells of that ship\n */\n\nexport default (type, ship, deck, coordinates, state, toStart) => {\n  const newState = { ...state };\n\n  if (toStart) {\n    newState.squadron[type][ship].pop();\n    newState.squadron[type][ship].unshift(coordinates);\n  } else {\n    newState.squadron[type][ship][deck] = coordinates;\n  }\n\n  newState.squadron[type][ship].forEach((item, index) => {\n    item && (newState.ally[item[1]][item[0]].ship = `${ type }-${ ship }-${ index }`);\n  });\n\n  return countShips(newState);\n}\n","import countShips from './countShips';\n\n/**\n * removing deck from the ship;\n * removing 'ship' parameter of cell of removed deck\n * and renewing it for the rest cells of that ship\n */\n\nexport default (type, ship, deck, coordinates, state) => {\n  const newState = { ...state };\n\n  newState.squadron[type][ship].splice(deck, 1);\n  newState.squadron[type][ship].push(null);\n\n  newState.ally[coordinates[1]][coordinates[0]].ship = false;\n  newState.squadron[type][ship].forEach((item, index) => {\n    item && (newState.ally[item[1]][item[0]].ship = `${ type }-${ ship }-${ index }`);\n  });\n\n  return countShips(newState);\n}\n","/**\n * returns ship parameter of cell with current coordinates\n */\n\nexport default (sea, coordinates) => sea[coordinates[1]][coordinates[0]].ship;\n","import getShip from '../scripts/getShip';\nimport makeDeck from '../scripts/makeDeck';\nimport removeDeck from '../scripts/removeDeck';\nimport isThereShip from '../scripts/isThereShip';\nimport getCoordinates from '../scripts/getCoordinates';\nimport isThereShipInCross from '../scripts/isThereShipInCross';\nimport isThereShipDiagonally from '../scripts/isThereShipDiagonally';\n\nexport default (state, action) => {\n  const newState = { ...state };\n  const coordinates = getCoordinates(action.payload);\n\n  /**\n   * removing decks from ship\n   */\n  const thereIsShip = isThereShip(newState.ally, coordinates);\n  if (thereIsShip) {\n    /**\n     * removing possible only with ends of ships,\n     * decks in the middle could not be deleted\n     */\n    const [type, ship, deck] = getShip(thereIsShip);\n    return (deck === 0 || !newState.squadron[type][ship][deck + 1])\n      ? removeDeck(type, ship, deck, coordinates, newState)\n      : newState;\n  }\n\n  /**\n   * doing nothing if there are ships diagonally\n   */\n  const thereIsShipDiagonally = isThereShipDiagonally(newState.ally, coordinates);\n  if (thereIsShipDiagonally) return newState;\n\n  /**\n   * adding deck to the ship\n   */\n  const thereIsShipInCross = isThereShipInCross(newState.ally, coordinates);\n  if (thereIsShipInCross.length === 1) {\n    /**\n     * if clicked at the cell next to only one ship\n     * horizontally or vertically,\n     * see if we can add deck with this cell coordinates\n     * to this ship\n     */\n    const [type, ship] = thereIsShipInCross[0].split(`-`).map(item => parseInt(item));\n    for (let newDeck = 1; newDeck < newState.squadron[type][ship].length; newDeck++) {\n      if (newState.squadron[type][ship][newDeck] === null) {\n        const toStart = (\n          coordinates[0] < newState.squadron[type][ship][0][0] ||\n          coordinates[1] < newState.squadron[type][ship][0][1]\n        );\n        return makeDeck(type, ship, newDeck, coordinates, newState, toStart);\n      }\n    }\n\n    return newState;\n  }\n\n  /**\n   * placing new ship\n   */\n  for (let i = 0; i < newState.squadron[newState.currentType].length; i++) {\n    const ship = newState.squadron[newState.currentType][i];\n    const shipIsFull = ship.filter(i => i).length === ship.length;\n    if (shipIsFull) continue;\n      /**\n       * new deck must be first deck of ship,\n       * adding decks handled previously with `thereIsShipInCross`.\n       * it`s made to prevent breaking order of ship placement\n       * (four decker -> three decker -> two decker -> single decker)\n       */\n    return ship[0] === null\n      ? makeDeck(newState.currentType, i, 0, coordinates, newState, false)\n      : newState;\n  }\n\n  return newState;\n}\n","/**\n * input: coordinates of `a` cell\n * return: first not-false ship parameter of any `b` cell\n * (going clockwise, starting with left-top)\n *\n * ____________\n * |_b_|___|_b_|\n * |___|_a_|___|\n * |_b_|___|_b_|\n *\n */\n\nexport default (sea, coordinates) => (\n  (\n    sea[coordinates[1] - 1] && (\n      (\n        sea[coordinates[1] - 1][coordinates[0] - 1] &&\n        sea[coordinates[1] - 1][coordinates[0] - 1].ship\n      )\n      ||\n      (\n        sea[coordinates[1] - 1][coordinates[0] + 1] &&\n        sea[coordinates[1] - 1][coordinates[0] + 1].ship\n      )\n    )\n  ) || (\n    sea[coordinates[1] + 1] && (\n      (\n        sea[coordinates[1] + 1][coordinates[0] - 1] &&\n        sea[coordinates[1] + 1][coordinates[0] - 1].ship\n      )\n      ||\n      (\n        sea[coordinates[1] + 1][coordinates[0] + 1] &&\n        sea[coordinates[1] + 1][coordinates[0] + 1].ship\n      )\n    )\n  )\n);\n","/**\n * input: coordinates of `a` cell\n * return: array of not-false ship parameters of all `b` cells\n * (going clockwise, starting with top)\n *\n * ____________\n * |___|_b_|___|\n * |_b_|_a_|_b_|\n * |___|_b_|___|\n *\n */\n\nexport default (sea, coordinates) => [\n  (\n    sea[coordinates[1] - 1] &&\n    sea[coordinates[1] - 1][coordinates[0]] &&\n    sea[coordinates[1] - 1][coordinates[0]].ship\n  ),\n  (\n    sea[coordinates[1] + 1] &&\n    sea[coordinates[1] + 1][coordinates[0]] &&\n    sea[coordinates[1] + 1][coordinates[0]].ship\n  ),\n  (\n    sea[coordinates[1]][coordinates[0] - 1] &&\n    sea[coordinates[1]][coordinates[0] - 1].ship\n  ),\n  (\n    sea[coordinates[1]][coordinates[0] + 1] &&\n    sea[coordinates[1]][coordinates[0] + 1].ship\n  ),\n].filter(i => i);\n","/**\n * input: ship array\n * return: sea with all cells around ship setting miss parameter\n */\n\nexport default (sea, ship) => {\n  const newSea = [...sea];\n  const newShip = [...ship];\n\n  const [xsLength, ysLength] = newShip.length === 1        // lengths of arrays of cells around ship\n    ? [3, 3]                                              // for single decker (1x1) it's 3x3\n    : newShip[1][1] - newShip[0][1] === 0\n      ? [newShip.length + 2, 3]                           // ship length + 2 cells around\n      : [3, newShip.length + 2];\n\n  const condition = (x, y) =>                             // returns false if ship has cell with x and y coordinates\n    newShip.length === 1\n      ? !(x === 1 && y === 1)\n      : newShip[1][1] - newShip[0][1] === 0\n        ? !(x > 0 && x < newShip.length + 1 && y === 1)\n        : !(y > 0 && y < newShip.length + 1 && x === 1);\n\n  const shoot = (x, y) => {\n    const head = newShip[0];                               // first deck of ship (leftmost or topmost)\n    if (\n      newSea[y - 1 + head[1]] &&                           // -1 because 0 would hit ship cell, and we need cell before\n      newSea[y - 1 + head[1]][x - 1 + head[0]]\n    ) {\n      newSea[y - 1 + head[1]][x - 1 + head[0]].miss = true;\n    }\n  };\n\n  [...Array(ysLength).keys()].forEach(y => {\n    [...Array(xsLength).keys()].forEach(x => {\n      condition(x, y) && shoot(x, y);\n    });\n  });\n\n  return newSea;\n}\n","import itSank from '../scripts/itSank';\nimport getShip from '../scripts/getShip';\nimport isThereShip from '../scripts/isThereShip';\nimport shootAroundSankShip from '../scripts/shootAroundSankShip';\n\nexport default (state, action) => {\n  let feedback;\n  const data = [];\n  const newState = { ...state };\n  const coordinates = [...action.payload.data];\n  const thereIsShip = isThereShip(newState.ally, coordinates);\n\n  if (thereIsShip) {\n    newState.ally[coordinates[1]][coordinates[0]].hit = true;\n    const [type, ship] = getShip(thereIsShip);\n    if (itSank(type, ship, newState)) {\n      newState.allyShipsLeft -= 1;\n      if (newState.allyShipsLeft === 0) {\n        newState.feedback = { type: `defeat` };\n        return newState;\n      }\n\n      newState.squadron[type][ship].forEach(item => {\n        newState.ally[item[1]][item[0]].sank = true;\n        data.push(item);\n      });\n\n      newState.ally = shootAroundSankShip(newState.ally, data);\n      feedback = `sank`;\n    } else {\n      feedback = `hit`;\n    }\n  } else {\n    feedback = `miss`;\n    newState.ally[coordinates[1]][coordinates[0]].miss = true;\n  }\n\n  data.length === 0 && data.push(coordinates);\n  newState.feedback = { type: `feedback`, data, feedback };\n  return newState;\n}\n","export default (type, ship, state) => {\n  const areAllDecksHitted = (a, i) => state.ally[i[1]][i[0]].hit && a;\n  return state.squadron[type][ship].reduce(areAllDecksHitted, true);\n}\n","/**\n * 0 == empty\n * 1 == miss\n * 2 == sank\n * 3 == hit\n * 4 == ship\n */\n\nexport default (state) => ({\n  ...state,\n  feedback: {\n    type: `victory`,\n    data: [\n      ...state.ally.map(row =>\n        row.map(cell =>\n          cell.miss\n            ? 1\n            : cell.sank\n              ? 2\n              : cell.hit\n                ? 3\n                : cell.ship\n                  ? 4\n                  : 0\n        )\n      )\n    ],\n  },\n});\n","/**\n * there are four ship types:\n * 4-deck (1pc)\n * 3-deck (2pc)\n * 2-deck (3pc)\n * 1-deck (4pc)\n *\n * output is array of all ships\n * each ship is array of decks\n * each deck is array of coordinates -- [x, y]\n * by default deck is null\n */\n\nexport default () =>\n  [...Array(4).keys()].map(h =>\n    [...Array(h + 1)].map(_ =>\n      [...Array(4 - h)].map(_ =>\n        null\n      )\n    )\n  );\n","export default (state) => ({ ...state, feedback: null });\n","import countShips from '../scripts/countShips';\n\nexport default (state) => {\n  const newState = { ...state };\n  const getDirection = () => Math.round(Math.random()); // 0 == horizontal, 1 == vertical\n  const shifts = [                                      // constraints of coordinates of first deck for all ship types\n    [\n      [-3, 0],\n      [0, -3],\n    ],\n    [\n      [-2, 0],\n      [0, -2],\n    ],\n    [\n      [-1, 0],\n      [0, -1],\n    ],\n    [\n      [0, 0],\n      [0, 0],\n    ],\n  ];\n\n  const getRandomCoordinates = (type, direction) => {\n    /**\n     * create random coordinates in constrained range;\n     * check if there is ships diagonally or in cross\n     * to first deck with this coordinates and all other decks;\n     * if there is -- create new coordinates recursively.\n     * first deck of ship is leftmost or topmost\n     * for horizontal or vertical direction respectively\n     */\n    /**\n     * TODO: handle case with too much recursion\n     * > currently 'too much recursion' error leaves state\n     * > with all ships placed except those that weren't placed when error appears\n     * > you may place them manually, however in 'comp' mode AI can't\n     */\n\n    let coordinates = [\n      Math.floor(Math.random() * (10 + shifts[type][direction][0])),\n      Math.floor(Math.random() * (10 + shifts[type][direction][1])),\n    ];\n\n    try {\n      for (let i = -1; i <= newState.squadron[type][0].length + 1; i++) {\n        if (\n          (\n            direction &&\n            newState.ally[coordinates[1] + i] !== undefined && (\n              (\n                newState.ally[coordinates[1] + i][coordinates[0] - 1] !== undefined &&\n                newState.ally[coordinates[1] + i][coordinates[0] - 1].ship\n              ) || (\n                newState.ally[coordinates[1] + i][coordinates[0]] !== undefined &&\n                newState.ally[coordinates[1] + i][coordinates[0]].ship\n              ) || (\n                newState.ally[coordinates[1] + i][coordinates[0] + 1] !== undefined &&\n                newState.ally[coordinates[1] + i][coordinates[0] + 1].ship\n              )\n            )\n          ) || (\n            (\n              newState.ally[coordinates[1] - 1] !== undefined &&\n              newState.ally[coordinates[1] - 1][coordinates[0] + i] !== undefined &&\n              newState.ally[coordinates[1] - 1][coordinates[0] + i].ship\n            ) || (\n              newState.ally[coordinates[1]][coordinates[0] + i] !== undefined &&\n              newState.ally[coordinates[1]][coordinates[0] + i].ship\n            ) || (\n              newState.ally[coordinates[1] + 1] !== undefined &&\n              newState.ally[coordinates[1] + 1][coordinates[0] + i] !== undefined &&\n              newState.ally[coordinates[1] + 1][coordinates[0] + i].ship\n            )\n          )\n        ) {\n          return getRandomCoordinates(type, direction);\n        }\n      }\n    } catch (e) {\n      console.error(e);\n      return;\n    }\n    return coordinates;\n  };\n\n  const place = (state) => {\n    const brandNewState = { ...state };\n\n    try {\n      brandNewState.squadron.forEach((_, type) => {\n        brandNewState.squadron[type].forEach((_, ship) => {\n          const direction = getDirection();\n          const coordinates = getRandomCoordinates(type, direction);\n          if (!coordinates) throw new Error(`browser too weak for such recursion 😔`);\n\n          brandNewState.squadron[type][ship] = brandNewState.squadron[type][ship].map((_, index) =>\n            direction === 0\n              ? [coordinates[0] + index, coordinates[1]]\n              : [coordinates[0], coordinates[1] + index]\n          );\n\n          brandNewState.squadron[type][ship].forEach((item, index) => {\n            item && (brandNewState.ally[item[1]][item[0]].ship = `${ type }-${ ship }-${ index }`);\n          });\n        })\n      });\n    } catch (e) {\n      console.error(e);\n    }\n    return countShips(newState);\n  };\n\n  return place(newState);\n}\n","/**\n * 0 == empty\n * 1 == miss\n * 2 == sank\n * 3 == hit\n * 4 == ship\n */\n\nexport default (state, action) => ({\n  ...state,\n  enemy: [\n    ...action.payload.data.map((row, y) =>\n      row.map((cell, x) => ({\n        id: `cell-${ x }-${ y }-enemy`,\n        miss: cell === 1,\n        sank: cell === 2,\n        hit: cell === 3 || cell === 2,\n        ship: cell === 4 || cell === 3 || cell === 2,\n      }))\n    )\n  ],\n});\n","import shootAroundSankShip from '../scripts/shootAroundSankShip';\n\nexport default (state, action) => {\n  const newState = { ...state };\n  const ship = [...action.payload.data];\n  const feedback = action.payload.feedback;\n\n  switch (feedback) {\n    case `miss`: {\n      newState.enemy[ship[0][1]][ship[0][0]].miss = true;\n      break;\n    }\n\n    case `hit`: {\n      newState.enemy[ship[0][1]][ship[0][0]].ship = true;\n      newState.enemy[ship[0][1]][ship[0][0]].hit = true;\n      break;\n    }\n\n    case `sank`: {\n      ship.forEach(item => {\n        newState.enemy[item[1]][item[0]].hit = true;\n        newState.enemy[item[1]][item[0]].ship = true;\n        newState.enemy[item[1]][item[0]].sank = true;\n      });\n      newState.enemy = shootAroundSankShip(newState.enemy, ship);\n      newState.enemyShipsLeft -= 1;\n\n      if (newState.enemyShipsLeft === 0) {\n        newState.feedback = { type: `victory`, data: [...newState.ally] };\n        return newState;\n      }\n\n      break;\n    }\n\n    default:\n      break;\n  }\n  return newState;\n}\n","import makeSea from '../scripts/makeSea';\nimport placeShip from '../actions/placeShip';\nimport receiveFire from '../actions/receiveFire';\nimport sendVictory from '../actions/sendVictory';\nimport makeSquadron from '../scripts/makeSquadron';\nimport clearFeedback from '../actions/clearFeedback';\nimport randomPlacing from '../actions/randomPlacing';\nimport receiveVictory from '../actions/receiveVictory';\nimport receiveFeedback from '../actions/receiveFeedback';\n\n/**\n * ally               -- your sea\n * enemy              -- your opponent sea\n * squadron           -- see ../scripts/makeSquadron\n * shipsToPlace       -- number of ships to be placed (by type)\n * shipsToPlace.total -- total number of ships to be placed (for triggering 'confirm' state)\n * currentType        -- type (index) of ship that will be placed next (for arrow indicator in Placing component)\n * allyShipsLeft      -- number of your ships on water (not-sank)\n * enemyShipsLeft     -- number of your opponent ships on water (not-sank)\n * feedback           -- feedback message, formed for sending\n */\n\nconst initialState = () => ({\n  ally: makeSea(`ally`),\n  enemy: makeSea(`enemy`),\n  squadron: makeSquadron(),\n  shipsToPlace: {\n    fourDecker: 1,\n    threeDecker: 2,\n    twoDecker: 3,\n    singleDecker: 4,\n    total: 10,\n  },\n  currentType: 0,\n  allyShipsLeft: 10,\n  enemyShipsLeft: 10,\n  feedback: null,\n});\n\nexport default (state = initialState(), action) => {\n  switch (action.type) {\n    case `SEND`:\n      return (\n        action.payload.type === `feedback` ||\n        action.payload.type === `defeat` ||\n        action.payload.type === `victory`\n      )\n        ? clearFeedback(state)\n        : state;\n\n    case `PLACE_SHIP`:\n      return placeShip(state, action);\n\n    case `RANDOM`:\n      return randomPlacing({ ...state, ally: makeSea(`ally`), squadron: makeSquadron(), });\n\n    case `RECEIVE`: {\n      switch (action.payload.type) {\n        case `fire`:\n          return receiveFire(state, action);\n\n        case `feedback`:\n          return receiveFeedback(state, action);\n\n        case `victory`:\n          return receiveVictory(state, action);\n\n        case `defeat`:\n          return sendVictory(state, action);\n\n        default:\n          return state;\n      }\n    }\n\n    case `RESET`:\n    case `NEW_ROUND`:\n      return initialState();\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport game from './game';\nimport rtc from './rtc';\nimport sea from './sea';\n\nconst reducers = combineReducers({\n  game,\n  rtc,\n  sea,\n});\n\nexport default reducers;\n","import send from '../actions/send';\r\nimport setRTC from '../actions/setRTC';\r\nimport receive from '../actions/receive';\r\nimport setPeerID from '../actions/setPeerID';\r\nimport clearMessage from '../actions/clearMessage';\r\nimport setIsConnected from '../actions/setIsConnected';\r\nimport setIsInitialised from '../actions/setIsInitialised';\r\n\r\n/**\r\n * peerID             -- id on Peer.js sercer\r\n * interface          -- Peer.js or AI\r\n * isClient           -- flag shows that current peer did not create session\r\n * isConnected        -- flag shows connecting to session status\r\n * isInitialised      -- flag shows that init function of current interface was called\r\n * waitingForFeedback -- flag prevent firing more than once (happens with slow network)\r\n */\r\n\r\n const initialState = () => ({\r\n  peerID: '',\r\n  message: null,\r\n  interface: null,\r\n  isClient: false,\r\n  isConnected: false,\r\n  isInitialised: false,\r\n  waitingForFeedback: false,\r\n});\r\n\r\n\r\nexport default (state = initialState(), action) => {\r\n  switch (action.type) {\r\n    case `SET_RTC`:\r\n      return setRTC(state, action);\r\n\r\n    case `SEND`:\r\n      return send(state, action);\r\n\r\n    case `CLEAR_MESSAGE`:\r\n      return clearMessage(state);\r\n\r\n    case `READY`:\r\n      return send(state, { payload: { type: `ready` }});\r\n\r\n    case `REPEAT`:\r\n      return send(state, { payload: { type: `repeat` }});\r\n\r\n    case `RECEIVE`:\r\n      return receive(state, action);\r\n\r\n    case `SET_PEER_ID`:\r\n      return setPeerID(state, action);\r\n\r\n    case `SET_IS_CONNECTED`:\r\n      return setIsConnected(state, action);\r\n\r\n    case `SET_IS_INITIALISED`:\r\n      return setIsInitialised(state, action);\r\n\r\n    case `RESET`:\r\n      return initialState();\r\n\r\n    default: return state;\r\n  }\r\n};\r\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport reducers from './reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(\n    applyMiddleware(thunkMiddleware)\n  )\n);\n\nexport default store;\n","import makeSea from './makeSea';\nimport makeSquadron from './makeSquadron';\nimport sendVictory from '../actions/sendVictory';\nimport receiveFire from '../actions/receiveFire';\nimport randomPlacing from '../actions/randomPlacing';\nimport receiveFeedback from '../actions/receiveFeedback';\n\n/**\n * machine states:\n * 0 -- shoot random cell (except those that already shoot)\n * 1 -- shoot cell next to last shoot in random direction (except those that already shoot)\n * 2 -- shoot cell next to last shoot in same direction\n * 3 -- shoot cell in opposite side of ship for last hit (in same direction)\n * \n * state changing:\n * |------------->|___0___|\n * |                  |\n * |<---------n---/__hit?__/\n * |                  | y\n * |              |___1___|<------------|\n * |                  |                 |\n * |              /__hit?__/            |\n * |             y/       \\n            |\n * |             /      /__sank?__/--n->|\n * |            /            |\n * |      |___2___|<-----|   | y\n * |          |          |   |\n * |      /__hit?__/--y->|   |\n * |          |n         |   |\n * |<-y--/__sank?__/     |   |\n * |          |n         |   |\n * |      |___3___|      |   |\n * |          |          |   |\n * |     /__hit?__/---y->|   |\n * |          | n            |\n * |<---------|<-------------|\n *\n */\n\nconst newSea = () => ({\n  ally: makeSea(`ally`),\n  enemy: makeSea(`enemy`),\n  squadron: makeSquadron(),\n  shipsToPlace: {\n    fourDecker: 1,\n    threeDecker: 2,\n    twoDecker: 3,\n    singleDecker: 4,\n    total: 10,\n  },\n  currentType: 0,\n  allyShipsLeft: 10,\n  enemyShipsLeft: 10,\n  feedback: null,\n});\n\nexport default function AI(props) {\n  this.init = (newGame = true) => {\n    this.state = 0;\n    this.shootLog = [];\n    this.lastShoot = null;\n    this.directions = [`up`, `down`, `left`, `right`];\n    this.directionsStack = null;\n    this.sea = randomPlacing(newSea());\n    this.fireDelay = 250; // ::ms\n    newGame && props.setIsConnected(true);\n  };\n\n  this.sendMessage = props.receive;\n\n  this.findLogIndex = (item) =>\n    this.shootLog.findIndex( ({ cell }) => cell.toString() === item.toString());\n\n  this.randomDirectionsStack = () =>\n    [...Array(4)].reduce(array => {\n      let item = Math.floor(Math.random() * 4);\n      while (array.indexOf(item) !== -1) {\n        item = Math.floor(Math.random() * 4);\n      }\n      return [...array, item];\n    }, []).map(item => this.directions[item]);\n\n  this.reverseDirection = () =>\n    (this.directions.indexOf(this.directionsStack[0]) + 1) % 2 === 0\n      ? this.directions[this.directions.indexOf(this.directionsStack[0]) - 1]\n      : this.directions[this.directions.indexOf(this.directionsStack[0]) + 1];\n\n  this.findHitIndex = () =>\n    this.shootLog.reduceRight((position, item, index) =>\n        item.feedback === `hit`\n          ? position === -1 || position - index === 1\n            ? index\n            : position\n          : position\n      , -1);\n\n  this.alreadyShoot = (coordinates) =>\n    !this.sea.enemy[coordinates[1]] ||\n    !this.sea.enemy[coordinates[1]][coordinates[0]] ||\n    this.sea.enemy[coordinates[1]][coordinates[0]].ship ||\n    this.sea.enemy[coordinates[1]][coordinates[0]].miss\n\n  this.addShift = ([x, y], direction, shift) => {\n    switch (direction) {\n      case `up`:\n        return [x, y - shift];\n\n      case `down`:\n        return [x, y + shift];\n\n      case `left`:\n        return [x - shift, y];\n\n      case `right`:\n        return [x + shift, y];\n\n      default:\n        return;\n    }\n  };\n\n  this.getRandomCoordinates = () => {\n    const randomStock = [];\n    const newCoordinates = () => [\n      Math.floor(Math.random() * 10),\n      Math.floor(Math.random() * 10),\n    ];\n    const hasCoordinates = (array, coordinates) =>\n      array.findIndex(i => i.toString() === coordinates.toString()) >= 0;\n\n    while (true) {\n      const coordinates = newCoordinates();\n      if (hasCoordinates(randomStock, coordinates)) {\n        continue;\n      }\n\n      if (this.alreadyShoot(coordinates)) {\n        randomStock.push(coordinates);\n        continue;\n      }\n      return coordinates;\n    }\n  };\n\n  this.shoot = () => {\n    switch (this.state) {\n      case 0: { // shoot random cell (except those that already shoot)\n        this.lastShoot = this.getRandomCoordinates();\n        break;\n      }\n\n      case 1: { // shoot cell next to last shoot in random direction (except those that already shoot)\n        const hit = this.findHitIndex();\n        if (this.directionsStack === null) {\n          this.directionsStack = this.randomDirectionsStack();\n        } else {\n          this.directionsStack.unshift();\n        }\n\n        if (this.directionsStack.length === 0) {\n          this.directionsStack = null;\n          this.changeState(`sank`);\n          return this.shoot();\n        }\n\n        const nextDirection = this.directionsStack[0];\n        const coordinates = this.addShift(this.shootLog[hit].cell, nextDirection, 1);\n\n        if (\n          this.alreadyShoot(coordinates) ||\n          coordinates[0] < 0 ||\n          coordinates[0] > 9 ||\n          coordinates[1] < 0 ||\n          coordinates[1] > 9\n        ) {\n          this.directionsStack.shift();\n          // this.lastDirection = nextDirection;\n          // this.lastShoot = this.addShift(this.shootLog[hit].cell, this.lastDirection, 1);\n          return this.shoot();\n        }\n\n        this.lastShoot = coordinates;\n        // this.lastDirection = nextDirection;\n        break;\n      }\n\n      case 2: { // shoot cell next to last shoot in same direction\n        const nextDirection = this.directionsStack[0];\n        const coordinates = this.addShift(this.lastShoot, nextDirection, 1);\n\n        if (\n          this.alreadyShoot(coordinates) ||\n          coordinates[0] < 0 ||\n          coordinates[0] > 9 ||\n          coordinates[1] < 0 ||\n          coordinates[1] > 9\n        ) {\n          this.changeState(`miss`);\n          return this.shoot();\n        }\n\n        this.lastShoot = coordinates;\n        break;\n      }\n\n      case 3: { // shoot cell in opposite side of ship to last hit (in same direction)\n        const nextDirection = this.reverseDirection();\n        const hit = this.findHitIndex();\n        let coordinates = this.addShift(this.shootLog[hit].cell, nextDirection, 1);\n\n        while (this.alreadyShoot(coordinates)) {\n          coordinates = this.addShift(coordinates, nextDirection, 1)\n        }\n\n        this.lastShoot = coordinates;\n        this.directionsStack = [nextDirection];\n        break;\n      }\n\n      default:\n        return;\n    }\n\n    this.shootLog.push({ cell: this.lastShoot });\n    setTimeout(() => {\n      this.sendMessage({ type: `fire`, data: this.lastShoot })\n    }, this.fireDelay);\n  };\n\n  this.changeState = (feedback) => {\n    switch (this.state) {\n      case 0: {\n        feedback === `hit` && (this.state = 1);\n        break;\n      }\n\n      case 1: {\n        this.state = feedback === `hit`\n          ? 2\n          : feedback === `sank`\n            ? 0\n            : 1;\n        break;\n      }\n\n      case 2: {\n        this.state = feedback === `hit`\n          ? 2\n          : feedback === `sank`\n            ? 0\n            : 3;\n        break;\n      }\n\n      case 3: {\n        this.state = feedback === `hit`\n          ? 2\n          : 0;\n        break;\n      }\n\n      default: break;\n    }\n  };\n\n  this.send = (data) => {\n    switch (data.type) {\n      case `fire`: {\n        this.sea = receiveFire(this.sea, { payload: data });\n        this.sendMessage(this.sea.feedback);\n        this.sea.feedback.feedback === `miss` && this.shoot();\n        this.sea.feedback = null;\n        break;\n      }\n\n      case `feedback`: {\n        this.sea = receiveFeedback(this.sea, { payload: data });\n        const logIndex = this.findLogIndex(this.lastShoot);\n        this.shootLog[logIndex].feedback = data.feedback;\n        this.changeState(data.feedback);\n\n        if (data.feedback === `sank`) {\n          this.directionsStack = null;\n        }\n\n        data.feedback !== `miss` && this.shoot();\n        break;\n      }\n\n      case `defeat`: {\n        this.sea = sendVictory(this.sea);\n        this.sendMessage(this.sea.feedback);\n        this.sendMessage({ type: `repeat` });\n        this.init(false);\n        break;\n      }\n\n      case `ready`: {\n        this.sendMessage({ type: `ready` });\n        break;\n      }\n\n      case `victory`: {\n        this.sendMessage({ type: `repeat` });\n        this.init(false);\n        break;\n      }\n\n      default:\n        break;\n    }\n  };\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  margin: 10px;\n  width: calc(50vmin - 26px);\n  height: calc(50vmin - 26px);\n  min-width: 300px;\n  min-height: 300px;\n  box-sizing: border-box;\n  border: 3px double ${ props => props.border ? props.move ? `#555` : `#aaa` : `#000` };\n  overflow: hidden;\n  user-select: none;\n`;\n\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  display: grid;\n  grid-gap: 1px;\n  grid-template: repeat(10, 1fr) / repeat(10, 1fr);\n`;\n\nexport default (props) =>\n  <Wrapper { ...props }>\n    <Content grid={ props.grid }>\n      { props.children }\n    </Content>\n  </Wrapper>\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Cell = styled.div`\n  box-sizing: border-box;\n  background-color: #000;\n  background-clip: content-box;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 110% 110%;\n\n  ${\n    props => props.grid && css`\n      outline: 1px dotted #222;\n    `\n  }\n\n  ${\n    props => ((props.ship && !props.sank) || props.place) && css`\n      outline: 1px solid #aaa;\n      z-index: 1;\n    `\n  }\n\n  ${\n    props => ((props.hit && !props.sank) || props.times) && css`\n      background-image: var(--hit);\n    `\n  }\n\n  ${\n    props => props.sank && css`\n      outline: 1px solid #555;\n      background-image: var(--sank);\n      z-index: 1;\n    `\n  }\n\n  ${\n    props => props.miss && css`\n      background-image: var(--miss);\n    `\n  }\n\n  ${\n    props => props.enemy && props.move && !props.miss && !props.hit && !props.ship && css`\n      :hover {\n        background-image: var(--hover);\n      }\n    `\n  }\n`;\n\nexport default (props) => {\n  const params = {\n    move: props.move,\n    enemy: props.enemy,\n    place: props.place,\n    times: props.times,\n    children: props.children,\n    className: props.className,\n    hit: props.data && props.data.hit,\n    miss: props.data && props.data.miss,\n    sank: props.data && props.data.sank,\n    ship: props.data && props.data.ship,\n    grid: props.data && !props.ship\n  };\n\n  const handleClick = () => {\n    props.onClick &&\n    (props.enemy === props.move) &&\n    !props.data.hit &&\n    !props.data.miss &&\n    props.onClick(props.data.id);\n  };\n\n  return <Cell onClick={ handleClick } { ...params } />\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Sea from './Sea';\nimport Cell from './Cell';\n\nconst Ally = (props) =>\n  <Sea border grid move={ props.game.move }>\n    {\n      props.sea.ally.map(row =>\n        row.map(cell =>\n          <Cell key={ cell.id } data={ cell } onClick={ (props.game.status === `place` || props.game.status === `confirm`) && props.place } />\n        )\n      )\n    }\n  </Sea>;\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n  sea: state.sea,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  place: (payload) => dispatch({ type: `PLACE_SHIP`, payload }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ally);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Sea from './Sea';\nimport Cell from './Cell';\n\nconst Enemy = (props) =>\n  <Sea border grid move={ !props.game.move }>\n    {\n      props.sea.enemy.map(row =>\n        row.map(cell =>\n          <Cell key={ cell.id } data={ cell } onClick={ props.fire } move={ props.game.status === `play` && props.game.move && !props.rtc.waitingForFeedback } enemy />\n        )\n      )\n    }\n  </Sea>;\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n  rtc: state.rtc,\n  sea: state.sea,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fire: (payload) => dispatch({ type: `SEND`, payload: { type: `fire`, data: payload }}),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Enemy);\n","import styled from 'styled-components';\n\nexport default styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  justify-content: center;\n`;\n","import Peer from 'peerjs';\n\nexport default function RTC(props) {\n  this.lastPeerID = null;\n\n  this.init = () => {\n    this.peer = new Peer();\n    this.connection = null;\n    props.setIsInitialised(true);\n\n    this.peer.on('open', () => {\n      if (this.peer.id === null) {\n        this.peer.id = this.lastPeerID;\n      } else {\n        this.lastPeerID = this.peer.id;\n      }\n      props.setPeerID(this.peer.id);\n    });\n\n    this.peer.on('connection', (c) => {\n      if (this.connection) {\n        c.on('open', c.close);\n        return;\n      }\n      this.connection = c;\n      this.ready();\n    });\n\n    this.peer.on('disconnected', () => {\n      // this.peer.id = this.lastPeerID;\n      // this.peer._lastServerID = this.lastPeerID;\n      this.peer.reconnect();\n    });\n\n    this.peer.on('close', () => {\n      this.connection = null;\n    });\n\n    this.peer.on('error', () => {\n      props.handleDisconnect();\n    });\n\n\n    this.peer.on('close', () => {\n      this.connection = null;\n    });\n  };\n\n  this.ready = () => {\n    props.setIsConnected(true);\n\n    this.connection.on('data', props.receive);\n\n    this.connection.on('close', () => {\n      this.connection = null;\n      props.handleDisconnect();\n    });\n  };\n\n  this.join = () => {\n    if (this.connection) this.connection.close();\n\n    this.connection = this.peer.connect(props.peerID, {\n      reliable: true,\n      serialization: 'json',\n    });\n\n    this.connection.on('open', () => {\n      props.setIsConnected(true);\n    });\n\n    this.connection.on('close', () => {\n      this.connection = null;\n      props.handleDisconnect();\n    });\n\n    this.connection.on('data', props.receive);\n  };\n\n  this.send = (data) => {\n    this.connection && this.connection.open && this.connection.send(data);\n  };\n}\n","import styled from 'styled-components';\n\nexport default styled.span`\n  border-bottom: 1px dotted #444;\n  cursor: pointer;\n\n  :hover {\n    border-bottom: 1px solid #aaa;\n  }\n`;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport RTC from '../scripts/RTC';\nimport TextButton from './TextButton';\n\nconst StyledSelect = styled.div`\n  width: 100%;\n  height: 100%;\n  flex-flow: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 30px;\n  display: flex;\n\n  label {\n    text-align: center;\n    min-height: 1.2em;\n    line-height: 1.2em;\n    user-select: none;\n  }\n`;\n\nconst Output = styled.input.attrs({\n  type: `text`,\n})`\n  max-width: 90%;\n  min-height: 1.5em;\n  background-color: #000;\n  border: none;\n  border-radius: 0;\n  outline: none;\n  color: #ddd;\n  font-size: inherit;\n  font-weight: 300;\n  line-height: 1.5em;\n  text-align: center;\n`;\n\nconst Input = styled(Output)`\n  border-bottom: 1px solid #aaa;\n`;\n\nconst Button = styled.button`\n  margin: 16px 16px;\n  width: 108px;\n  height: 64px;\n  font-family: 'Material Icons';\n`;\n\nconst Select = (props) => {\n  const input = useRef(null);\n  const output = useRef(null);\n  const [changed, setChanged] = useState(false);\n  const [selected, setSelected] = useState(false);\n  const setRTC = (id, isClient = false, isInitialised = false) =>\n    props.setRTC({\n      interface: new RTC({\n        peerID: id,\n        setPeerID: props.setPeerID,\n        setIsConnected: props.setIsConnected,\n        setIsInitialised: props.setIsInitialised,\n        receive: props.receive,\n        handleDisconnect: props.handleDisconnect,\n      }),\n      isClient,\n      isInitialised,\n    });\n  const connect = (id = input.current.value) => id && id !== '' && id !== props.rtc.peerID && setRTC(id, true);\n  const handleKeyPress = (event) => { event.key === `Enter` && connect() };\n  const preventDefault = (event) => { event.preventDefault() };\n  const handleChange = () => setChanged(true);\n  const handleSelect = () => setSelected(true);\n  const handleClick = () => { connect() };\n\n  useEffect(\n    () => {\n      if (props.game.status !== `connect`) return;\n\n      if (props.rtc.interface === null) {\n        setRTC(props.rtc.peerID);\n      } else if (!props.rtc.isInitialised){\n        props.rtc.interface.init();\n        props.rtc.isClient && props.rtc.interface.join();\n      } else if (props.rtc.peerID && !selected) {\n        output.current.select();\n      }\n    },// eslint-disable-next-line\n    [props]\n  );\n\n  switch (props.game.status) {\n    case `choose`:\n      return (\n        <StyledSelect>\n          <label>select game type:</label>\n          <div>\n            <Button onClick={ () => props.selectType(true) }>&#xE7FD;&#xE8D4;&#xE7FD;</Button>\n            <Button onClick={ () => props.selectType(false) }>&#xE7FD;&#xE8D4;&#xE30A;</Button>\n          </div>\n        </StyledSelect>\n    );\n\n    case `connect`:\n      return (\n        <StyledSelect>\n          <label>share this text<br />with someone<br />you want to play:</label>\n          <Output ref={ output } onChange={ preventDefault } onSelect={ handleSelect } value={ props.rtc.peerID } />\n          <label>or paste text that<br />was shared to you:</label>\n          <Input ref={ input } onChange={ handleChange } onKeyPress={ handleKeyPress } />\n          <label>{ changed && <TextButton onClick={ handleClick }>connect</TextButton> }</label>\n        </StyledSelect>\n    );\n\n    default: return null;\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n  rtc: state.rtc,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setRTC: (payload) => dispatch({ type: `SET_RTC`, payload }),\n  receive: (payload) => dispatch({ type: `RECEIVE`, payload }),\n  setPeerID: (payload) => dispatch({ type: `SET_PEER_ID`, payload }),\n  selectType: (network) => dispatch({ type: `SELECT_TYPE`, payload: network }),\n  setIsConnected: (payload) => dispatch({ type: 'SET_IS_CONNECTED', payload }),\n  setIsInitialised: (payload) => dispatch({ type: `SET_IS_INITIALISED`, payload }),\n  handleDisconnect: () => dispatch({ type: `RESET` }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Select);\n","import styled from 'styled-components';\n\nexport default styled.label`\n  display: flex;\n  justify-content: center;\n  font-size: 20px;\n  font-weight: 200;\n  text-align: center;\n  user-select: none;\n`;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport Sea from './Sea';\nimport Cell from './Cell';\nimport Label from './Label';\nimport TextButton from './TextButton';\n\nconst HintLabel = styled.label`\n  grid-row: 1 / span 2;\n  grid-column: 1 / span 10;\n  text-align: center;\n`;\n\nconst Confirm = styled(Label)`\n  grid-row: 10;\n  grid-column: 1 / span 10;\n  align-items: center;\n`;\n\nconst Ship = styled.div`\n  grid-column: 2 / span 8;\n  grid-row: ${ props => props.row };\n  display: grid;\n  grid-template: auto / repeat(8, 1fr);\n`;\n\nconst Deck = styled(Cell)`\n  grid-row-start: ${ props => props.row };\n  grid-column-start: ${ props => props.column };\n`;\n\nconst Times = styled(Cell)`\n  grid-row-start: ${ props => props.row };\n  grid-column-start: 7;\n  border: 0;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 70% 70%;\n`;\n\nconst Number = styled(Cell)`\n  grid-row-start: ${ props => props.row };\n  grid-column-start: 8;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 0;\n  font-size: 30px;\n  font-weight: 200;\n  line-height: 30px;\n\n  @media screen and (min-width: 600px) and (min-height: 600px) {\n    font-size: 5vmin;\n    line-height: 4vmin;\n  }\n`;\n\nconst PlacingSea = styled(Sea)`\n  & > div:after {\n    grid-column-start: 1;\n    grid-row-start: 3;\n    display: ${ props => props.currentType === -1 ? `none` : `flex` };\n    align-items: center;\n    justify-content: center;\n    transform: translateY(${ props => props.currentType * 200 }%);\n    transition: transform .5s;\n    font-family: 'Material Icons';\n    font-size: 29px;\n    line-height: 29px;\n    content: '\\u{E315}';\n  }\n`;\n\nconst PlacingShip = ({ decks, row, number }) =>\n  <Ship row={ row }>\n    {\n      [...Array(decks).keys()].map(item =>\n        <Deck key={ `placing-deck-${ decks }-${ item }` } column={ item + 1 } place />\n      )\n    }\n    <Times times />\n    <Number>{ number }</Number>\n  </Ship>;\n\nconst Placing = (props) =>\n  <PlacingSea currentType={ props.sea.currentType }>\n    <HintLabel>\n      click on field to place ship manually<br />or place them <TextButton onClick={ props.random }>randomly</TextButton>\n    </HintLabel>\n    <PlacingShip decks={ 4 } row={ 3 } number={ props.sea.shipsToPlace.fourDecker } />\n    <PlacingShip decks={ 3 } row={ 5 } number={ props.sea.shipsToPlace.threeDecker } />\n    <PlacingShip decks={ 2 } row={ 7 } number={ props.sea.shipsToPlace.twoDecker } />\n    <PlacingShip decks={ 1 } row={ 9 } number={ props.sea.shipsToPlace.singleDecker } />\n    { props.game.status === `confirm` && <Confirm><TextButton onClick={ props.ready }>confirm and proceed</TextButton></Confirm> }\n  </PlacingSea>;\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n  sea: state.sea,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  ready: () => dispatch({ type: `READY` }),\n  random: () => dispatch({ type: `RANDOM` }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Placing);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport Sea from './Sea';\nimport Label from './Label';\nimport TextButton from './TextButton';\n\nconst Wait = styled(Label)`\n  grid-row: 4 / span 4;\n  grid-column: 1 / span 10;\n  align-items: center;\n  font-size: 25px;\n`;\n\nconst Result = styled(Wait)`\n  grid-row: 3 / span 3;\n  align-items: flex-start;\n`;\n\nconst Repeat = styled(Wait)`\n  grid-row: 6;\n  justify-content: space-around;\n`;\n\nconst Ready = styled(Wait)`\n  grid-row: 8;\n`;\n\nconst resultText = {\n  victory: `you win!`,\n  defeat: `you loose!`,\n};\n\nconst TextBlock = (props) => {\n  switch (props.game.status) {\n    case `defeat`:\n    case `victory`:\n      return (\n        <Sea>\n          <Result>\n            { resultText[props.game.status] }\n            <br/>\n            { !props.game.isAllyWantRepeat && `play another round?` }\n          </Result>\n          <Repeat>\n            {\n            props.game.isAllyWantRepeat\n              ? `waiting for yor opponent answer`\n              : [\n                <TextButton key=\"yes\" onClick={ props.repeat }>yes</TextButton>,\n                <TextButton key=\"no\" onClick={ props.reset }>no</TextButton>\n              ]\n            }\n          </Repeat>\n          { props.game.type === `pvp` && props.game.isEnemyWantRepeat && <Ready>your opponent said «yes»</Ready> }\n        </Sea>\n      );\n\n    case `wait`:\n      return (\n        <Sea>\n          <Wait>wait until opponent<br/>place their ships</Wait>\n        </Sea>\n      );\n\n    default:\n      return null;\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  repeat: () => dispatch({ type: `REPEAT` }),\n  reset: () => dispatch({ type: `RESET` }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TextBlock);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Ally from './Ally';\nimport Enemy from './Enemy';\nimport Ocean from './Ocean';\nimport Select from './Select';\nimport Placing from './Placing';\nimport TextBlock from './TextBlock';\n\nconst Game = (props) => {\n  switch (props.status) {\n    case `choose`:\n    case `connect`:\n      return <Select />;\n\n    case `place`:\n    case `confirm`:\n      return (\n        <Ocean>\n          <Ally />\n          <Placing />\n        </Ocean>\n      );\n\n    case `victory`:\n    case `wait`:\n      return (\n        <Ocean>\n          <Ally />\n          <TextBlock />\n        </Ocean>\n      );\n\n    case `play`:\n      return (\n        <Ocean>\n          <Ally />\n          <Enemy />\n        </Ocean>\n      );\n\n    case `defeat`:\n      return (\n        <Ocean>\n          <TextBlock />\n          <Enemy />\n        </Ocean>\n      );\n\n    default:\n      return null;\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  status: state.game.status,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport AI from '../scripts/AI';\nimport Game from './Game';\n\nconst App = (props) => {\n  useEffect(\n    () => {\n      switch (props.game.status) {\n        case `connect`: {\n          if (props.rtc.isConnected) {\n            props.changeStatus(`place`);\n            props.setMove(props.rtc.isClient);\n          }\n          break;\n        }\n\n        case `place`: {\n          if (props.game.type === `comp`) {\n            if (props.rtc.interface === null) {\n              props.setRTC({\n                interface: new AI({\n                  setIsConnected: props.setIsConnected,\n                  receive: props.receive,\n                })\n              });\n            } else if (!props.rtc.isConnected) {\n              props.rtc.interface.init();\n            }\n          }\n          props.sea.shipsToPlace.total === 0 && props.changeStatus(`confirm`);\n          break;\n        }\n\n        case `confirm`: {\n          if (props.sea.shipsToPlace.total !== 0) {\n            props.changeStatus(`place`);\n            break;\n          }\n\n          props.game.isAllyReady && (\n            props.game.isEnemyReady\n              ? props.changeStatus(`play`)\n              : props.changeStatus(`wait`)\n          );\n          break;\n        }\n\n        case `wait`: {\n          props.game.isEnemyReady && props.changeStatus(`play`);\n          break;\n        }\n\n        case `play`: {\n          break;\n        }\n\n        case `defeat`:\n        case `victory`: {\n          props.game.isAllyWantRepeat && props.game.isEnemyWantRepeat && props.newRound();\n          break;\n        }\n\n        default: break;\n      }\n\n      if (props.rtc.message) {\n        props.rtc.interface.send(props.rtc.message);\n        props.clearMessage();\n      } else if (props.sea.feedback) {\n        props.send(props.sea.feedback);\n      }\n    },\n    [props]\n  );\n\n  return <Game />;\n};\n\nconst mapStateToProps = (state) => ({\n  game: state.game,\n  rtc: state.rtc,\n  sea: state.sea,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  changeStatus: (status) => dispatch({ type: `CHANGE_STATUS`, payload: status }),\n  setIsConnected: (payload) => dispatch({ type: 'SET_IS_CONNECTED', payload }),\n  setMove: (payload) => dispatch({ type: `SET_MOVE`, payload }),\n  receive: (payload) => dispatch({ type: `RECEIVE`, payload }),\n  setRTC: (payload) => dispatch({ type: `SET_RTC`, payload }),\n  send: (payload) => dispatch({ type: `SEND`, payload }),\n  clearMessage: () => dispatch({ type: `CLEAR_MESSAGE` }),\n  newRound: () => dispatch({ type: `NEW_ROUND` }),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './components/App';\n\nReactDOM.render(\n  <Provider store={ store }><Router><Route path='/' component={ App } /></Router></Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}